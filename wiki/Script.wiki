#summary How scripting works.
#labels Featured,Phase-Implementation

= The Take Script Language =

Take supports a simple scripting language to derivation define rules. Here is an example from taken from the test cases: 

{{{
// script for test scenario 1
@@dc:creator=author jens dietrich
@@dc:date=26/02/2007
var java.lang.String person1,person2,person3
var java.lang.String grandchild,father,grandfather
rule1: if is_father_of(grandchild,father) and is_father_of(father,grandfather) then is_grandfather_of(grandchild,grandfather)
fact1: is_father_of("Frank","Lutz")
fact2: is_father_of("Guenther", "Otto")
fact3: is_father_of("Jens", "Klaus")
fact4: is_father_of("Lutz", "Otto")
fact5: is_father_of("Klaus", "Otto")
fact6: is_father_of("Max","Jens")
fact7: is_father_of("Ralf", "Lutz")
fact8: is_father_of("Werner", "Otto")
}}}

Some noteable features: 
  # comments are supported, comment lines start with //
  # annotations are supported. There are two types of annotations, gloabl annotations that apply to the entire knowledge base start with @@, and local annotations applying only to the next element starting with a single @
  # variables are declared using the *var* keyword, they are typed using Java types
  # rules and facts have unique identifiers (labels) 
  # string literals can be referenced directly as constant terms
  # *not yet implemented:* support for object references and external knowledge 



Here is another version of the script using more features (check also the [http://take.googlecode.com/svn/trunk/take/src/test/nz/org/take/compiler/scenario1/rules1.take code] in the repository):
 
{{{
// script for test scenario 1
@@dc:creator=author jens dietrich
@@dc:date=26/02/2007
var java.lang.String person1,person2,person3
var java.lang.String grandchild,father,grandfather
// queries - annotations are optional and are used to generate 
// custom classes and methods
@take.compilerhint.class=IsFatherOf
@take.compilerhint.slots=son,father
@take.compilerhint.method=getFather
query is_father_of(in,out)
@take.compilerhint.method=getSons
query is_father_of(out,in)
@take.compilerhint.class=IsGrandfatherOf
@take.compilerhint.slots=grandson,grandfather
@take.compilerhint.method=getGrandfather
query is_grandfather_of(in,out)
@take.compilerhint.method=getGrandchildren
query is_grandfather_of(out,in)
// rules
rule2: if is_father_of(grandchild,father) and is_father_of(father,grandfather) then is_grandfather_of(grandchild,grandfather)
fact1: is_father_of("Frank","Lutz")
fact2: is_father_of("Guenther", "Otto")
fact3: is_father_of("Jens", "Klaus")
fact4: is_father_of("Lutz", "Otto")
fact5: is_father_of("Klaus", "Otto")
fact6: is_father_of("Max","Jens")
fact7: is_father_of("Ralf", "Lutz")
fact8: is_father_of("Werner", "Otto")
}}}

This script contains some additional features: 
  # queries that are used to generate code to query the rule base
  # a query is a predicate and a spec which parameters (slots) will be provided by the application
  # additional annotations ("compilation hints") that are used by the compiler to choose names for the generated code



