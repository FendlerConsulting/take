#summary How Java functionality are integrated into rules.
#labels Featured,Phase-Design,Phase-Implementation

= Introduction =

The smooth integration of Java types, objects and methods is one of the major design goals for Take.

= Details =

Java functionality is integrated as follows: 

  # Java classes and interfaces are used as variable terms
  # Java methods returning booleans can be used as predicates
  # Arbitrary Java methods can be used as terms
  # Java (bean) properties and associations (one2one and one2many) can be used as predicates/ fact(s)

Planned, bot yet implemented: 

  # Java object (references) to be used as constant terms
  
  
Examples: 

The test scenario 3 uses Java methods as predicates and functions, and the custom class 'Person' is used as term type. The rule base is defined by the following [http://take.googlecode.com/svn/trunk/take/src/test/nz/org/take/compiler/scenario3/rules3.take script]:

{{{
// script for test scenario 1
@@dc:creator=author jens dietrich
@@dc:date=30/04/2007
var test.nz.org.take.compiler.scenario3.Person person1,person2
@take.compilerhint.class=IsBrotherRelationship
@take.compilerhint.slots=person1,person2
@take.compilerhint.method=isBrother
query isBrother(in,in)
// rules
rule1: if sameAs(getFather(person1),getFather(person2)) then isBrother(person1,person2) 
}}}

`sameAs` and `getFather` are methods in `Person`.   Note that there are now facts. A query like `isBrother(p1,p2)` is answered by performing `p1.getFather().sameAs(p2.getFather())`. 

The test scenario 4 uses Java properties as predicates. Consider the following rule from the test [http://take.googlecode.com/svn/trunk/take/src/test/nz/org/take/compiler/scenario4/rules4.take script]:

{{{
query isEnrolled(in,in)
rule1: if courses(student,course) and college(course,college) then isEnrolled(student,college)
}}}

Courses have a property college (i.e., a pair of methods `getCollege` and `setCollege`), and students have a `ONE2MANY` property courses (i.e., the property type is `java.util.List<Course>`). It is then possible to query the generated knowledge base whether a student is enrolled in a certain college. 
