#summary How the rule compiler works.

= Introduction =

The rule compiler generates source code from the instantiated rule API. By default, this is Java source code but other target languages are possible. This source code can then be compiled at application runtime using the [http://jcp.org/en/jsr/detail?id=199 JDK compiler API] and loaded into application code using special classloaders. This is very similar to the way JSPs work. 

= Details =

A Take knowledge base is passed to a compiler. The compiler generates source code that is then further processed. This example is code from a [http://take.googlecode.com/svn/trunk/take/src/test/nz/org/take/compiler/scenario1/GenerateClasses.java test case]: 

{{{
public class GenerateClasses {

	/**
	 * Generate the sources for the example.
	 * @param args
	 */
	public static void main(String[] args) throws Exception {
		BasicConfigurator.configure();
		DefaultLocation location = new DefaultLocation();
		NameGenerator nameGenerator = new DefaultNameGenerator();
		nz.org.take.compiler.Compiler compiler = new DefaultCompiler();
		compiler.add(new JalopyCodeFormatter());
		compiler.setNameGenerator(nameGenerator);
		
		// generate kb
		String script = "src/test/nz/org/take/compiler/scenario1/rules1.take";
		KnowledgeBaseReader reader = new KnowledgeBaseReader();
		KnowledgeBase kb = null;
		try {
			kb = reader.read(new FileReader(script));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (ScriptException e) {
			e.printStackTrace();
		}
		
		compiler.compile(kb, location, "test.nz.org.take.compiler.scenario1.generated","_KB");

	}

}
}}}

The 'KnowledgeBaseReader' reads the script and creates a knowledge base. This knowledge base is then passed to the compiler that generates a [http://take.googlecode.com/svn/trunk/take/src/test/nz/org/take/compiler/scenario1/generated/_KB.java _KB] class. 

This class has public methods that can be used to query the rules. For instance, the following method is generated:

{{{
    public ResultSet<IsGrandfatherOf> getGrandchildren(
        final java.lang.String grandfather);
}}}

The API is very simple: 
  # [http://take.googlecode.com/svn/trunk/take/src/nz/org/take/rt/ResultSet.java ResultSet] is an Iterator
  # 'IsGrandfatherOf' is a data class generated for the respective predicate
  # the parameters have the correct types, they are specified in the queries as *in* parameters
  # the result sets have a reference to the derivation used - applications can trace the rules that have been used in order to compute results!




