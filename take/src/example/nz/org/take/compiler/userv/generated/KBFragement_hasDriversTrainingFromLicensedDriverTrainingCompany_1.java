package example.nz.org.take.compiler.userv.generated;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Mon Aug 20 21:59:11 NZST 2007
 */
@SuppressWarnings("unchecked")
class KBFragement_hasDriversTrainingFromLicensedDriverTrainingCompany_1 {
    /**
     * Method generated for query hasDriversTrainingFromLicensedDriverTrainingCompany[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _hasDriversTrainingFromLicensedDriverTrainingCompany
    */
    public static ResultSet<_hasDriversTrainingFromLicensedDriverTrainingCompany> hasDriversTrainingFromLicensedDriverTrainingCompany_1(
        final example.nz.org.take.compiler.userv.domainmodel.Driver slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_hasDriversTrainingFromLicensedDriverTrainingCompany> _result = new ResultSet(KBFragement_hasDriversTrainingFromLicensedDriverTrainingCompany_1.hasDriversTrainingFromLicensedDriverTrainingCompany_1(
                    slot1, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query hasDriversTrainingFromLicensedDriverTrainingCompany[in]
     * @param source
     * @param target
     * @return an iterator
     * code generated using velocity template nz/org/take/compiler/reference/JPredicate_11.vm
    */
    static ResourceIterator<_hasDriversTrainingFromLicensedDriverTrainingCompany> hasDriversTrainingFromLicensedDriverTrainingCompany_1(
        final example.nz.org.take.compiler.userv.domainmodel.Driver slot1,
        final DerivationController _derivation) {
        _derivation.log("public boolean example.nz.org.take.compiler.userv.domainmodel.Driver.hasDriversTrainingFromLicensedDriverTrainingCompany()",
            DerivationController.JAVA_METHOD);

        if (slot1.hasDriversTrainingFromLicensedDriverTrainingCompany()) {
            _hasDriversTrainingFromLicensedDriverTrainingCompany result = new _hasDriversTrainingFromLicensedDriverTrainingCompany();
            result.slot1 = slot1;

            return new SingletonIterator<_hasDriversTrainingFromLicensedDriverTrainingCompany>(result);
        }

        return EmptyIterator.DEFAULT;
    }
}
