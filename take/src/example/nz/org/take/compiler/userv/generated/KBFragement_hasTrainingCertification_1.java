package example.nz.org.take.compiler.userv.generated;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Mon Aug 20 21:56:52 NZST 2007
 */
@SuppressWarnings("unchecked")
class KBFragement_hasTrainingCertification_1 {
    /**
     * Method generated for query /hasTrainingCertification[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _hasTrainingCertification
    */
    public static ResultSet<_hasTrainingCertification> hasTrainingCertification_1(
        final example.nz.org.take.compiler.userv.domainmodel.Driver slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_hasTrainingCertification> _result = new ResultSet(KBFragement_hasTrainingCertification_1.hasTrainingCertification_1(
                    slot1, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /hasTrainingCertification[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _hasTrainingCertification
    */
    static ResourceIterator<_hasTrainingCertification> hasTrainingCertification_1(
        final example.nz.org.take.compiler.userv.domainmodel.Driver slot1,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_hasTrainingCertification> result = new IteratorChain<_hasTrainingCertification>(3) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    //  IF hasDriversTrainingFromSchool(<driver>) THEN /hasTrainingCertification(<driver>)
                    case 0:
                        return hasTrainingCertification_1_0(slot1,
                            _derivation.reset(_derivationlevel));

                    //  IF hasDriversTrainingFromLicensedDriverTrainingCompany(<driver>) THEN /hasTrainingCertification(<driver>)
                    case 1:
                        return hasTrainingCertification_1_1(slot1,
                            _derivation.reset(_derivationlevel));

                    //  IF hasTakenASeniorCitizenDriversRefresherCourse(<driver>) THEN /hasTrainingCertification(<driver>)
                    case 2:
                        return hasTrainingCertification_1_2(slot1,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    //  IF hasDriversTrainingFromSchool(<driver>) THEN /hasTrainingCertification(<driver>)
                    case 0:
                        return "DE_DAC07";

                    //  IF hasDriversTrainingFromLicensedDriverTrainingCompany(<driver>) THEN /hasTrainingCertification(<driver>)
                    case 1:
                        return "DE_DAC08";

                    //  IF hasTakenASeniorCitizenDriversRefresherCourse(<driver>) THEN /hasTrainingCertification(<driver>)
                    case 2:
                        return "DE_DAC09";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /hasTrainingCertification[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _hasTrainingCertification
    */
    private static ResourceIterator<_hasTrainingCertification> hasTrainingCertification_1_0(
        final example.nz.org.take.compiler.userv.domainmodel.Driver slot1,
        final DerivationController _derivation) {
        _derivation.log("DE_DAC07", DerivationController.RULE, slot1);

        // Variable bindings in rule:  IF hasDriversTrainingFromSchool(<driver>) THEN /hasTrainingCertification(<driver>)
        class bindingsInRule23 {
            // Property generated for term  "<driver>"
            example.nz.org.take.compiler.userv.domainmodel.Driver p1;
        }
        ;

        final bindingsInRule23 bindings = new bindingsInRule23();
        bindings.p1 = slot1;

        // code for prereq hasDriversTrainingFromSchool(<driver>)
        final ResourceIterator<_hasDriversTrainingFromSchool> iterator1 = KBFragement_hasDriversTrainingFromSchool_1.hasDriversTrainingFromSchool_1(slot1,
                _derivation.increaseDepth());

        // code for prereq /hasTrainingCertification(<driver>)
        final ResourceIterator<_hasTrainingCertification> iterator2 = new NestedIterator<_hasDriversTrainingFromSchool, _hasTrainingCertification>(iterator1) {
                public ResourceIterator<_hasTrainingCertification> getNextIterator(
                    _hasDriversTrainingFromSchool object) {
                    bindings.p1 = object.slot1;

                    return new SingletonIterator(new _hasTrainingCertification(
                            bindings.p1));
                }
            };

        return iterator2;
    }

    /**
     * Method generated for query /hasTrainingCertification[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _hasTrainingCertification
    */
    private static ResourceIterator<_hasTrainingCertification> hasTrainingCertification_1_1(
        final example.nz.org.take.compiler.userv.domainmodel.Driver slot1,
        final DerivationController _derivation) {
        _derivation.log("DE_DAC08", DerivationController.RULE, slot1);

        // Variable bindings in rule:  IF hasDriversTrainingFromLicensedDriverTrainingCompany(<driver>) THEN /hasTrainingCertification(<driver>)
        class bindingsInRule24 {
            // Property generated for term  "<driver>"
            example.nz.org.take.compiler.userv.domainmodel.Driver p1;
        }
        ;

        final bindingsInRule24 bindings = new bindingsInRule24();
        bindings.p1 = slot1;

        // code for prereq hasDriversTrainingFromLicensedDriverTrainingCompany(<driver>)
        final ResourceIterator<_hasDriversTrainingFromLicensedDriverTrainingCompany> iterator1 =
            KBFragement_hasDriversTrainingFromLicensedDriverTrainingCompany_1.hasDriversTrainingFromLicensedDriverTrainingCompany_1(slot1,
                _derivation.increaseDepth());

        // code for prereq /hasTrainingCertification(<driver>)
        final ResourceIterator<_hasTrainingCertification> iterator2 = new NestedIterator<_hasDriversTrainingFromLicensedDriverTrainingCompany, _hasTrainingCertification>(iterator1) {
                public ResourceIterator<_hasTrainingCertification> getNextIterator(
                    _hasDriversTrainingFromLicensedDriverTrainingCompany object) {
                    bindings.p1 = object.slot1;

                    return new SingletonIterator(new _hasTrainingCertification(
                            bindings.p1));
                }
            };

        return iterator2;
    }

    /**
     * Method generated for query /hasTrainingCertification[in]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _hasTrainingCertification
    */
    private static ResourceIterator<_hasTrainingCertification> hasTrainingCertification_1_2(
        final example.nz.org.take.compiler.userv.domainmodel.Driver slot1,
        final DerivationController _derivation) {
        _derivation.log("DE_DAC09", DerivationController.RULE, slot1);

        // Variable bindings in rule:  IF hasTakenASeniorCitizenDriversRefresherCourse(<driver>) THEN /hasTrainingCertification(<driver>)
        class bindingsInRule25 {
            // Property generated for term  "<driver>"
            example.nz.org.take.compiler.userv.domainmodel.Driver p1;
        }
        ;

        final bindingsInRule25 bindings = new bindingsInRule25();
        bindings.p1 = slot1;

        // code for prereq hasTakenASeniorCitizenDriversRefresherCourse(<driver>)
        final ResourceIterator<_hasTakenASeniorCitizenDriversRefresherCourse> iterator1 =
            KBFragement_hasTakenASeniorCitizenDriversRefresherCourse_1.hasTakenASeniorCitizenDriversRefresherCourse_1(slot1,
                _derivation.increaseDepth());

        // code for prereq /hasTrainingCertification(<driver>)
        final ResourceIterator<_hasTrainingCertification> iterator2 = new NestedIterator<_hasTakenASeniorCitizenDriversRefresherCourse, _hasTrainingCertification>(iterator1) {
                public ResourceIterator<_hasTrainingCertification> getNextIterator(
                    _hasTakenASeniorCitizenDriversRefresherCourse object) {
                    bindings.p1 = object.slot1;

                    return new SingletonIterator(new _hasTrainingCertification(
                            bindings.p1));
                }
            };

        return iterator2;
    }
}
