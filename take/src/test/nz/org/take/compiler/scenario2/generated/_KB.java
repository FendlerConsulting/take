package test.nz.org.take.compiler.scenario2.generated;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Sun May 20 22:42:05 NZST 2007
 */
@SuppressWarnings("unchecked")
public class _KB {
    /**
     * Method generated for query /isAncestor[in,in]
     * @param person1 input parameter generated from slot 0
     * @param person2 input parameter generated from slot 1
     * @return an iterator for instances of AncestorRelationship
    */
    public ResultSet<AncestorRelationship> isAncestor(
        final java.lang.String person1, final java.lang.String person2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<AncestorRelationship> _result = new ResultSet(isAncestor(
                    person1, person2, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /isAncestor[in,in]
     * @param person1 input parameter generated from slot 0
     * @param person2 input parameter generated from slot 1
     * @return an iterator for instances of AncestorRelationship
    */
    private ResourceIterator<AncestorRelationship> isAncestor(
        final java.lang.String person1, final java.lang.String person2,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<AncestorRelationship> result = new IteratorChain<AncestorRelationship>(2) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    //  IF /isFather(<descendant>,<ancestor>) THEN /isAncestor(<descendant>,<ancestor>)
                    case 0:
                        return isAncestor_0(person1, person2,
                            _derivation.reset(_derivationlevel));

                    //  IF /isAncestor(<x>,<ancestor>) AND /isFather(<descendant>,<x>) THEN /isAncestor(<descendant>,<ancestor>)
                    case 1:
                        return isAncestor_1(person1, person2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    //  IF /isFather(<descendant>,<ancestor>) THEN /isAncestor(<descendant>,<ancestor>)
                    case 0:
                        return "rule1";

                    //  IF /isAncestor(<x>,<ancestor>) AND /isFather(<descendant>,<x>) THEN /isAncestor(<descendant>,<ancestor>)
                    case 1:
                        return "rule2";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /isAncestor[in,in]
     * @param person1 input parameter generated from slot 0
     * @param person2 input parameter generated from slot 1
     * @return an iterator for instances of AncestorRelationship
    */
    private ResourceIterator<AncestorRelationship> isAncestor_0(
        final java.lang.String person1, final java.lang.String person2,
        final DerivationController _derivation) {
        _derivation.log("rule1", DerivationController.RULE);

        // Variable bindings in rule:  IF /isFather(<descendant>,<ancestor>) THEN /isAncestor(<descendant>,<ancestor>)
        class bindingsInRule1 {
            // Property generated for term  "<descendant>"
            java.lang.String p1;

            // Property generated for term  "<ancestor>"
            java.lang.String p2;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p2 = person2;
        bindings.p1 = person1;

        // code for prereq /isFather(<descendant>,<ancestor>)
        final ResourceIterator<_isFather> iterator1 = isFather_11(person1,
                person2, _derivation.increaseDepth());

        // code for prereq /isAncestor(<descendant>,<ancestor>)
        final ResourceIterator<AncestorRelationship> iterator2 = new NestedIterator<_isFather, AncestorRelationship>(iterator1) {
                public ResourceIterator<AncestorRelationship> getNextIterator(
                    _isFather object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return new SingletonIterator(new AncestorRelationship(
                            bindings.p1, bindings.p2));
                }
            };

        return iterator2;
    }

    /**
     * Method generated for query /isAncestor[in,in]
     * @param person1 input parameter generated from slot 0
     * @param person2 input parameter generated from slot 1
     * @return an iterator for instances of AncestorRelationship
    */
    private ResourceIterator<AncestorRelationship> isAncestor_1(
        final java.lang.String person1, final java.lang.String person2,
        final DerivationController _derivation) {
        _derivation.log("rule2", DerivationController.RULE);

        // Variable bindings in rule:  IF /isAncestor(<x>,<ancestor>) AND /isFather(<descendant>,<x>) THEN /isAncestor(<descendant>,<ancestor>)
        class bindingsInRule2 {
            // Property generated for term  "<x>"
            java.lang.String p1;

            // Property generated for term  "<ancestor>"
            java.lang.String p2;

            // Property generated for term  "<descendant>"
            java.lang.String p3;
        }
        ;

        final bindingsInRule2 bindings = new bindingsInRule2();
        bindings.p2 = person2;
        bindings.p3 = person1;

        // code for prereq /isAncestor(<x>,<ancestor>)
        final ResourceIterator<AncestorRelationship> iterator1 = isAncestor_01(person2,
                _derivation.increaseDepth());

        // code for prereq /isFather(<descendant>,<x>)
        final ResourceIterator<_isFather> iterator2 = new NestedIterator<AncestorRelationship, _isFather>(iterator1) {
                public ResourceIterator<_isFather> getNextIterator(
                    AncestorRelationship object) {
                    bindings.p1 = object.person1;
                    bindings.p2 = object.person2;

                    return isFather_11(bindings.p3, bindings.p1,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq /isAncestor(<descendant>,<ancestor>)
        final ResourceIterator<AncestorRelationship> iterator3 = new NestedIterator<_isFather, AncestorRelationship>(iterator2) {
                public ResourceIterator<AncestorRelationship> getNextIterator(
                    _isFather object) {
                    bindings.p3 = object.slot1;
                    bindings.p1 = object.slot2;

                    return new SingletonIterator(new AncestorRelationship(
                            bindings.p3, bindings.p2));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    public ResultSet<_isFather> isFather_11(final java.lang.String slot1,
        final java.lang.String slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_isFather> _result = new ResultSet(isFather_11(slot1, slot2,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private ResourceIterator<_isFather> isFather_11(
        final java.lang.String slot1, final java.lang.String slot2,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_isFather> result = new IteratorChain<_isFather>(14) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // /isFather(r0,r)
                    case 0:
                        return isFather_11_0(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r1,r)
                    case 1:
                        return isFather_11_1(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r00,r0)
                    case 2:
                        return isFather_11_2(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r01,r0)
                    case 3:
                        return isFather_11_3(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r10,r1)
                    case 4:
                        return isFather_11_4(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r11,r1)
                    case 5:
                        return isFather_11_5(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r000,r00)
                    case 6:
                        return isFather_11_6(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r001,r00)
                    case 7:
                        return isFather_11_7(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r010,r01)
                    case 8:
                        return isFather_11_8(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r011,r01)
                    case 9:
                        return isFather_11_9(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r100,r10)
                    case 10:
                        return isFather_11_10(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r101,r10)
                    case 11:
                        return isFather_11_11(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r110,r11)
                    case 12:
                        return isFather_11_12(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r111,r11)
                    case 13:
                        return isFather_11_13(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // /isFather(r0,r)
                    case 0:
                        return "fact1";

                    // /isFather(r1,r)
                    case 1:
                        return "fact2";

                    // /isFather(r00,r0)
                    case 2:
                        return "fact3";

                    // /isFather(r01,r0)
                    case 3:
                        return "fact4";

                    // /isFather(r10,r1)
                    case 4:
                        return "fact5";

                    // /isFather(r11,r1)
                    case 5:
                        return "fact6";

                    // /isFather(r000,r00)
                    case 6:
                        return "fact7";

                    // /isFather(r001,r00)
                    case 7:
                        return "fact8";

                    // /isFather(r010,r01)
                    case 8:
                        return "fact9";

                    // /isFather(r011,r01)
                    case 9:
                        return "fact10";

                    // /isFather(r100,r10)
                    case 10:
                        return "fact11";

                    // /isFather(r101,r10)
                    case 11:
                        return "fact12";

                    // /isFather(r110,r11)
                    case 12:
                        return "fact13";

                    // /isFather(r111,r11)
                    case 13:
                        return "fact14";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_0(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact1", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r0") && slot2.equals("r")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_1(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact2", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r1") && slot2.equals("r")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_2(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact3", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r00") && slot2.equals("r0")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_3(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact4", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r01") && slot2.equals("r0")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_4(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact5", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r10") && slot2.equals("r1")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_5(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact6", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r11") && slot2.equals("r1")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_6(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact7", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r000") && slot2.equals("r00")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_7(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact8", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r001") && slot2.equals("r00")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_8(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact9", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r010") && slot2.equals("r01")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_9(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact10", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r011") && slot2.equals("r01")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_10(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact11", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r100") && slot2.equals("r10")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_11(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact12", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r101") && slot2.equals("r10")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_12(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact13", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r110") && slot2.equals("r11")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_11_13(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("fact14", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("r111") && slot2.equals("r11")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isAncestor[out,in]
     * @param person2 input parameter generated from slot 1
     * @return an iterator for instances of AncestorRelationship
    */
    public ResultSet<AncestorRelationship> isAncestor_01(
        final java.lang.String person2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<AncestorRelationship> _result = new ResultSet(isAncestor_01(
                    person2, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /isAncestor[out,in]
     * @param person2 input parameter generated from slot 1
     * @return an iterator for instances of AncestorRelationship
    */
    private ResourceIterator<AncestorRelationship> isAncestor_01(
        final java.lang.String person2, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<AncestorRelationship> result = new IteratorChain<AncestorRelationship>(2) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    //  IF /isFather(<descendant>,<ancestor>) THEN /isAncestor(<descendant>,<ancestor>)
                    case 0:
                        return isAncestor_01_0(person2,
                            _derivation.reset(_derivationlevel));

                    //  IF /isAncestor(<x>,<ancestor>) AND /isFather(<descendant>,<x>) THEN /isAncestor(<descendant>,<ancestor>)
                    case 1:
                        return isAncestor_01_1(person2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    //  IF /isFather(<descendant>,<ancestor>) THEN /isAncestor(<descendant>,<ancestor>)
                    case 0:
                        return "rule1";

                    //  IF /isAncestor(<x>,<ancestor>) AND /isFather(<descendant>,<x>) THEN /isAncestor(<descendant>,<ancestor>)
                    case 1:
                        return "rule2";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /isAncestor[out,in]
     * @param person2 input parameter generated from slot 1
     * @return an iterator for instances of AncestorRelationship
    */
    private ResourceIterator<AncestorRelationship> isAncestor_01_0(
        final java.lang.String person2, final DerivationController _derivation) {
        _derivation.log("rule1", DerivationController.RULE);

        // Variable bindings in rule:  IF /isFather(<descendant>,<ancestor>) THEN /isAncestor(<descendant>,<ancestor>)
        class bindingsInRule1 {
            // Property generated for term  "<descendant>"
            java.lang.String p1;

            // Property generated for term  "<ancestor>"
            java.lang.String p2;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p2 = person2;

        // code for prereq /isFather(<descendant>,<ancestor>)
        final ResourceIterator<_isFather> iterator1 = isFather_01(person2,
                _derivation.increaseDepth());

        // code for prereq /isAncestor(<descendant>,<ancestor>)
        final ResourceIterator<AncestorRelationship> iterator2 = new NestedIterator<_isFather, AncestorRelationship>(iterator1) {
                public ResourceIterator<AncestorRelationship> getNextIterator(
                    _isFather object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return new SingletonIterator(new AncestorRelationship(
                            bindings.p1, bindings.p2));
                }
            };

        return iterator2;
    }

    /**
     * Method generated for query /isAncestor[out,in]
     * @param person2 input parameter generated from slot 1
     * @return an iterator for instances of AncestorRelationship
    */
    private ResourceIterator<AncestorRelationship> isAncestor_01_1(
        final java.lang.String person2, final DerivationController _derivation) {
        _derivation.log("rule2", DerivationController.RULE);

        // Variable bindings in rule:  IF /isAncestor(<x>,<ancestor>) AND /isFather(<descendant>,<x>) THEN /isAncestor(<descendant>,<ancestor>)
        class bindingsInRule2 {
            // Property generated for term  "<x>"
            java.lang.String p1;

            // Property generated for term  "<ancestor>"
            java.lang.String p2;

            // Property generated for term  "<descendant>"
            java.lang.String p3;
        }
        ;

        final bindingsInRule2 bindings = new bindingsInRule2();
        bindings.p2 = person2;

        // code for prereq /isAncestor(<x>,<ancestor>)
        final ResourceIterator<AncestorRelationship> iterator1 = isAncestor_01(person2,
                _derivation.increaseDepth());

        // code for prereq /isFather(<descendant>,<x>)
        final ResourceIterator<_isFather> iterator2 = new NestedIterator<AncestorRelationship, _isFather>(iterator1) {
                public ResourceIterator<_isFather> getNextIterator(
                    AncestorRelationship object) {
                    bindings.p1 = object.person1;
                    bindings.p2 = object.person2;

                    return isFather_01(bindings.p1, _derivation.increaseDepth());
                }
            };

        // code for prereq /isAncestor(<descendant>,<ancestor>)
        final ResourceIterator<AncestorRelationship> iterator3 = new NestedIterator<_isFather, AncestorRelationship>(iterator2) {
                public ResourceIterator<AncestorRelationship> getNextIterator(
                    _isFather object) {
                    bindings.p3 = object.slot1;
                    bindings.p1 = object.slot2;

                    return new SingletonIterator(new AncestorRelationship(
                            bindings.p3, bindings.p2));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    public ResultSet<_isFather> isFather_01(final java.lang.String slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_isFather> _result = new ResultSet(isFather_01(slot2,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private ResourceIterator<_isFather> isFather_01(
        final java.lang.String slot2, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_isFather> result = new IteratorChain<_isFather>(14) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // /isFather(r0,r)
                    case 0:
                        return isFather_01_0(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r1,r)
                    case 1:
                        return isFather_01_1(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r00,r0)
                    case 2:
                        return isFather_01_2(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r01,r0)
                    case 3:
                        return isFather_01_3(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r10,r1)
                    case 4:
                        return isFather_01_4(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r11,r1)
                    case 5:
                        return isFather_01_5(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r000,r00)
                    case 6:
                        return isFather_01_6(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r001,r00)
                    case 7:
                        return isFather_01_7(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r010,r01)
                    case 8:
                        return isFather_01_8(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r011,r01)
                    case 9:
                        return isFather_01_9(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r100,r10)
                    case 10:
                        return isFather_01_10(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r101,r10)
                    case 11:
                        return isFather_01_11(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r110,r11)
                    case 12:
                        return isFather_01_12(slot2,
                            _derivation.reset(_derivationlevel));

                    // /isFather(r111,r11)
                    case 13:
                        return isFather_01_13(slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // /isFather(r0,r)
                    case 0:
                        return "fact1";

                    // /isFather(r1,r)
                    case 1:
                        return "fact2";

                    // /isFather(r00,r0)
                    case 2:
                        return "fact3";

                    // /isFather(r01,r0)
                    case 3:
                        return "fact4";

                    // /isFather(r10,r1)
                    case 4:
                        return "fact5";

                    // /isFather(r11,r1)
                    case 5:
                        return "fact6";

                    // /isFather(r000,r00)
                    case 6:
                        return "fact7";

                    // /isFather(r001,r00)
                    case 7:
                        return "fact8";

                    // /isFather(r010,r01)
                    case 8:
                        return "fact9";

                    // /isFather(r011,r01)
                    case 9:
                        return "fact10";

                    // /isFather(r100,r10)
                    case 10:
                        return "fact11";

                    // /isFather(r101,r10)
                    case 11:
                        return "fact12";

                    // /isFather(r110,r11)
                    case 12:
                        return "fact13";

                    // /isFather(r111,r11)
                    case 13:
                        return "fact14";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_0(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact1", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r")) {
            result.slot1 = "r0";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_1(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact2", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r")) {
            result.slot1 = "r1";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_2(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact3", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r0")) {
            result.slot1 = "r00";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_3(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact4", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r0")) {
            result.slot1 = "r01";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_4(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact5", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r1")) {
            result.slot1 = "r10";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_5(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact6", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r1")) {
            result.slot1 = "r11";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_6(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact7", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r00")) {
            result.slot1 = "r000";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_7(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact8", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r00")) {
            result.slot1 = "r001";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_8(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact9", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r01")) {
            result.slot1 = "r010";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_9(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact10", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r01")) {
            result.slot1 = "r011";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_10(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact11", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r10")) {
            result.slot1 = "r100";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_11(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact12", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r10")) {
            result.slot1 = "r101";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_12(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact13", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r11")) {
            result.slot1 = "r110";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /isFather[out,in]
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFather
    */
    private _isFather isFather_01_13(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("fact14", DerivationController.FACT);

        _isFather result = new _isFather();
        result.slot2 = slot2;

        if (slot2.equals("r11")) {
            result.slot1 = "r111";

            return result;
        }

        return null;
    }
}
