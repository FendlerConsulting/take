package test.nz.org.take.compiler.scenario6.generated;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Thu May 17 19:47:24 NZST 2007
 */
@SuppressWarnings("unchecked")
public class _KB {
    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> getFather(
        final test.nz.org.take.compiler.scenario6.Person son) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(getFather(son, _derivation),
                _derivation);

        return _result;
    }

    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> getFather(
        final test.nz.org.take.compiler.scenario6.Person son,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // /is_father_of([Frank],[Lutz])
                    case 0:
                        return getFather_0(son,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Guenther],[Otto])
                    case 1:
                        return getFather_1(son,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Jens],[Klaus])
                    case 2:
                        return getFather_2(son,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Lutz],[Otto])
                    case 3:
                        return getFather_3(son,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Klaus],[Otto])
                    case 4:
                        return getFather_4(son,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Max],[Jens])
                    case 5:
                        return getFather_5(son,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Ralf],[Lutz])
                    case 6:
                        return getFather_6(son,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Werner],[Otto])
                    case 7:
                        return getFather_7(son,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // /is_father_of([Frank],[Lutz])
                    case 0:
                        return "fact1";

                    // /is_father_of([Guenther],[Otto])
                    case 1:
                        return "fact2";

                    // /is_father_of([Jens],[Klaus])
                    case 2:
                        return "fact3";

                    // /is_father_of([Lutz],[Otto])
                    case 3:
                        return "fact4";

                    // /is_father_of([Klaus],[Otto])
                    case 4:
                        return "fact5";

                    // /is_father_of([Max],[Jens])
                    case 5:
                        return "fact6";

                    // /is_father_of([Ralf],[Lutz])
                    case 6:
                        return "fact7";

                    // /is_father_of([Werner],[Otto])
                    case 7:
                        return "fact8";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_0(
        final test.nz.org.take.compiler.scenario6.Person son,
        final DerivationController _derivation) {
        _derivation.log("fact1");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals(Constants.Frank)) {
            result.father = Constants.Lutz;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_1(
        final test.nz.org.take.compiler.scenario6.Person son,
        final DerivationController _derivation) {
        _derivation.log("fact2");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals(Constants.Guenther)) {
            result.father = Constants.Otto;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_2(
        final test.nz.org.take.compiler.scenario6.Person son,
        final DerivationController _derivation) {
        _derivation.log("fact3");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals(Constants.Jens)) {
            result.father = Constants.Klaus;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_3(
        final test.nz.org.take.compiler.scenario6.Person son,
        final DerivationController _derivation) {
        _derivation.log("fact4");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals(Constants.Lutz)) {
            result.father = Constants.Otto;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_4(
        final test.nz.org.take.compiler.scenario6.Person son,
        final DerivationController _derivation) {
        _derivation.log("fact5");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals(Constants.Klaus)) {
            result.father = Constants.Otto;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_5(
        final test.nz.org.take.compiler.scenario6.Person son,
        final DerivationController _derivation) {
        _derivation.log("fact6");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals(Constants.Max)) {
            result.father = Constants.Jens;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_6(
        final test.nz.org.take.compiler.scenario6.Person son,
        final DerivationController _derivation) {
        _derivation.log("fact7");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals(Constants.Ralf)) {
            result.father = Constants.Lutz;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,out]
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_7(
        final test.nz.org.take.compiler.scenario6.Person son,
        final DerivationController _derivation) {
        _derivation.log("fact8");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals(Constants.Werner)) {
            result.father = Constants.Otto;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> getSons(
        final test.nz.org.take.compiler.scenario6.Person father) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(getSons(father,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> getSons(
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // /is_father_of([Frank],[Lutz])
                    case 0:
                        return getSons_0(father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Guenther],[Otto])
                    case 1:
                        return getSons_1(father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Jens],[Klaus])
                    case 2:
                        return getSons_2(father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Lutz],[Otto])
                    case 3:
                        return getSons_3(father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Klaus],[Otto])
                    case 4:
                        return getSons_4(father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Max],[Jens])
                    case 5:
                        return getSons_5(father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Ralf],[Lutz])
                    case 6:
                        return getSons_6(father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Werner],[Otto])
                    case 7:
                        return getSons_7(father,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // /is_father_of([Frank],[Lutz])
                    case 0:
                        return "fact1";

                    // /is_father_of([Guenther],[Otto])
                    case 1:
                        return "fact2";

                    // /is_father_of([Jens],[Klaus])
                    case 2:
                        return "fact3";

                    // /is_father_of([Lutz],[Otto])
                    case 3:
                        return "fact4";

                    // /is_father_of([Klaus],[Otto])
                    case 4:
                        return "fact5";

                    // /is_father_of([Max],[Jens])
                    case 5:
                        return "fact6";

                    // /is_father_of([Ralf],[Lutz])
                    case 6:
                        return "fact7";

                    // /is_father_of([Werner],[Otto])
                    case 7:
                        return "fact8";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_0(
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact1");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals(Constants.Lutz)) {
            result.son = Constants.Frank;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_1(
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact2");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals(Constants.Otto)) {
            result.son = Constants.Guenther;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_2(
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact3");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals(Constants.Klaus)) {
            result.son = Constants.Jens;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_3(
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact4");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals(Constants.Otto)) {
            result.son = Constants.Lutz;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_4(
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact5");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals(Constants.Otto)) {
            result.son = Constants.Klaus;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_5(
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact6");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals(Constants.Jens)) {
            result.son = Constants.Max;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_6(
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact7");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals(Constants.Lutz)) {
            result.son = Constants.Ralf;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,in]
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_7(
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact8");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals(Constants.Otto)) {
            result.son = Constants.Werner;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_grandfather_of[in,out]
     * @param grandson input parameter generated from slot 0
     * @return an iterator for instances of IsGrandfatherOf
    */
    public ResultSet<IsGrandfatherOf> getGrandfather(
        final test.nz.org.take.compiler.scenario6.Person grandson) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsGrandfatherOf> _result = new ResultSet(getGrandfather(
                    grandson, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /is_grandfather_of[in,out]
     * @param grandson input parameter generated from slot 0
     * @return an iterator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandfather(
        final test.nz.org.take.compiler.scenario6.Person grandson,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsGrandfatherOf> result = new IteratorChain<IsGrandfatherOf>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    //  IF /is_father_of(<grandchild>,<father>) AND /is_father_of(<father>,<grandfather>) THEN /is_grandfather_of(<grandchild>,<grandfather>)
                    case 0:
                        return getGrandfather_0(grandson,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    //  IF /is_father_of(<grandchild>,<father>) AND /is_father_of(<father>,<grandfather>) THEN /is_grandfather_of(<grandchild>,<grandfather>)
                    case 0:
                        return "rule2";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /is_grandfather_of[in,out]
     * @param grandson input parameter generated from slot 0
     * @return an iterator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandfather_0(
        final test.nz.org.take.compiler.scenario6.Person grandson,
        final DerivationController _derivation) {
        _derivation.log("rule2"); // Variable bindings in rule:  IF /is_father_of(<grandchild>,<father>) AND /is_father_of(<father>,<grandfather>) THEN /is_grandfather_of(<grandchild>,<grandfather>)
        class bindingsInRule1 {
            // Property generated for term  "<grandchild>"
            test.nz.org.take.compiler.scenario6.Person p1;

            // Property generated for term  "<father>"
            test.nz.org.take.compiler.scenario6.Person p2;

            // Property generated for term  "<grandfather>"
            test.nz.org.take.compiler.scenario6.Person p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = grandson;

        // code for prereq /is_father_of(<grandchild>,<father>)
        final ResourceIterator<IsFatherOf> iterator1 = getFather(grandson,
                _derivation.increaseDepth());

        // code for prereq /is_father_of(<father>,<grandfather>)
        final ResourceIterator<IsFatherOf> iterator2 = new NestedIterator<IsFatherOf, IsFatherOf>(iterator1) {
                public ResourceIterator<IsFatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p1 = object.son;
                    bindings.p2 = object.father;

                    return getFather(bindings.p2, _derivation.increaseDepth());
                }
            };

        // code for prereq /is_grandfather_of(<grandchild>,<grandfather>)
        final ResourceIterator<IsGrandfatherOf> iterator3 = new NestedIterator<IsFatherOf, IsGrandfatherOf>(iterator2) {
                public ResourceIterator<IsGrandfatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p2 = object.son;
                    bindings.p3 = object.father;

                    return new SingletonIterator(new IsGrandfatherOf(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query /is_grandfather_of[out,in]
     * @param grandfather input parameter generated from slot 1
     * @return an iterator for instances of IsGrandfatherOf
    */
    public ResultSet<IsGrandfatherOf> getGrandchildren(
        final test.nz.org.take.compiler.scenario6.Person grandfather) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsGrandfatherOf> _result = new ResultSet(getGrandchildren(
                    grandfather, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /is_grandfather_of[out,in]
     * @param grandfather input parameter generated from slot 1
     * @return an iterator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandchildren(
        final test.nz.org.take.compiler.scenario6.Person grandfather,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsGrandfatherOf> result = new IteratorChain<IsGrandfatherOf>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    //  IF /is_father_of(<grandchild>,<father>) AND /is_father_of(<father>,<grandfather>) THEN /is_grandfather_of(<grandchild>,<grandfather>)
                    case 0:
                        return getGrandchildren_0(grandfather,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    //  IF /is_father_of(<grandchild>,<father>) AND /is_father_of(<father>,<grandfather>) THEN /is_grandfather_of(<grandchild>,<grandfather>)
                    case 0:
                        return "rule2";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /is_grandfather_of[out,in]
     * @param grandfather input parameter generated from slot 1
     * @return an iterator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandchildren_0(
        final test.nz.org.take.compiler.scenario6.Person grandfather,
        final DerivationController _derivation) {
        _derivation.log("rule2"); // Variable bindings in rule:  IF /is_father_of(<grandchild>,<father>) AND /is_father_of(<father>,<grandfather>) THEN /is_grandfather_of(<grandchild>,<grandfather>)
        class bindingsInRule1 {
            // Property generated for term  "<grandchild>"
            test.nz.org.take.compiler.scenario6.Person p1;

            // Property generated for term  "<father>"
            test.nz.org.take.compiler.scenario6.Person p2;

            // Property generated for term  "<grandfather>"
            test.nz.org.take.compiler.scenario6.Person p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p3 = grandfather;

        // code for prereq /is_father_of(<grandchild>,<father>)
        final ResourceIterator<IsFatherOf> iterator1 = is_father_of_00(_derivation.increaseDepth());

        // code for prereq /is_father_of(<father>,<grandfather>)
        final ResourceIterator<IsFatherOf> iterator2 = new NestedIterator<IsFatherOf, IsFatherOf>(iterator1) {
                public ResourceIterator<IsFatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p1 = object.son;
                    bindings.p2 = object.father;

                    return is_father_of_11(bindings.p2, bindings.p3,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq /is_grandfather_of(<grandchild>,<grandfather>)
        final ResourceIterator<IsGrandfatherOf> iterator3 = new NestedIterator<IsFatherOf, IsGrandfatherOf>(iterator2) {
                public ResourceIterator<IsGrandfatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p2 = object.son;
                    bindings.p3 = object.father;

                    return new SingletonIterator(new IsGrandfatherOf(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> is_father_of_00() {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(is_father_of_00(
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> is_father_of_00(
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // /is_father_of([Frank],[Lutz])
                    case 0:
                        return is_father_of_00_0(_derivation.reset(
                                _derivationlevel));

                    // /is_father_of([Guenther],[Otto])
                    case 1:
                        return is_father_of_00_1(_derivation.reset(
                                _derivationlevel));

                    // /is_father_of([Jens],[Klaus])
                    case 2:
                        return is_father_of_00_2(_derivation.reset(
                                _derivationlevel));

                    // /is_father_of([Lutz],[Otto])
                    case 3:
                        return is_father_of_00_3(_derivation.reset(
                                _derivationlevel));

                    // /is_father_of([Klaus],[Otto])
                    case 4:
                        return is_father_of_00_4(_derivation.reset(
                                _derivationlevel));

                    // /is_father_of([Max],[Jens])
                    case 5:
                        return is_father_of_00_5(_derivation.reset(
                                _derivationlevel));

                    // /is_father_of([Ralf],[Lutz])
                    case 6:
                        return is_father_of_00_6(_derivation.reset(
                                _derivationlevel));

                    // /is_father_of([Werner],[Otto])
                    case 7:
                        return is_father_of_00_7(_derivation.reset(
                                _derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // /is_father_of([Frank],[Lutz])
                    case 0:
                        return "fact1";

                    // /is_father_of([Guenther],[Otto])
                    case 1:
                        return "fact2";

                    // /is_father_of([Jens],[Klaus])
                    case 2:
                        return "fact3";

                    // /is_father_of([Lutz],[Otto])
                    case 3:
                        return "fact4";

                    // /is_father_of([Klaus],[Otto])
                    case 4:
                        return "fact5";

                    // /is_father_of([Max],[Jens])
                    case 5:
                        return "fact6";

                    // /is_father_of([Ralf],[Lutz])
                    case 6:
                        return "fact7";

                    // /is_father_of([Werner],[Otto])
                    case 7:
                        return "fact8";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_0(final DerivationController _derivation) {
        _derivation.log("fact1");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = Constants.Frank;
            result.father = Constants.Lutz;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_1(final DerivationController _derivation) {
        _derivation.log("fact2");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = Constants.Guenther;
            result.father = Constants.Otto;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_2(final DerivationController _derivation) {
        _derivation.log("fact3");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = Constants.Jens;
            result.father = Constants.Klaus;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_3(final DerivationController _derivation) {
        _derivation.log("fact4");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = Constants.Lutz;
            result.father = Constants.Otto;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_4(final DerivationController _derivation) {
        _derivation.log("fact5");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = Constants.Klaus;
            result.father = Constants.Otto;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_5(final DerivationController _derivation) {
        _derivation.log("fact6");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = Constants.Max;
            result.father = Constants.Jens;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_6(final DerivationController _derivation) {
        _derivation.log("fact7");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = Constants.Ralf;
            result.father = Constants.Lutz;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[out,out]
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_7(final DerivationController _derivation) {
        _derivation.log("fact8");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = Constants.Werner;
            result.father = Constants.Otto;

            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> is_father_of_11(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(is_father_of_11(son,
                    father, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> is_father_of_11(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // /is_father_of([Frank],[Lutz])
                    case 0:
                        return is_father_of_11_0(son, father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Guenther],[Otto])
                    case 1:
                        return is_father_of_11_1(son, father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Jens],[Klaus])
                    case 2:
                        return is_father_of_11_2(son, father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Lutz],[Otto])
                    case 3:
                        return is_father_of_11_3(son, father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Klaus],[Otto])
                    case 4:
                        return is_father_of_11_4(son, father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Max],[Jens])
                    case 5:
                        return is_father_of_11_5(son, father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Ralf],[Lutz])
                    case 6:
                        return is_father_of_11_6(son, father,
                            _derivation.reset(_derivationlevel));

                    // /is_father_of([Werner],[Otto])
                    case 7:
                        return is_father_of_11_7(son, father,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // /is_father_of([Frank],[Lutz])
                    case 0:
                        return "fact1";

                    // /is_father_of([Guenther],[Otto])
                    case 1:
                        return "fact2";

                    // /is_father_of([Jens],[Klaus])
                    case 2:
                        return "fact3";

                    // /is_father_of([Lutz],[Otto])
                    case 3:
                        return "fact4";

                    // /is_father_of([Klaus],[Otto])
                    case 4:
                        return "fact5";

                    // /is_father_of([Max],[Jens])
                    case 5:
                        return "fact6";

                    // /is_father_of([Ralf],[Lutz])
                    case 6:
                        return "fact7";

                    // /is_father_of([Werner],[Otto])
                    case 7:
                        return "fact8";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_0(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact1");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals(Constants.Frank) && father.equals(Constants.Lutz)) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_1(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact2");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals(Constants.Guenther) && father.equals(Constants.Otto)) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_2(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact3");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals(Constants.Jens) && father.equals(Constants.Klaus)) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_3(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact4");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals(Constants.Lutz) && father.equals(Constants.Otto)) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_4(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact5");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals(Constants.Klaus) && father.equals(Constants.Otto)) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_5(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact6");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals(Constants.Max) && father.equals(Constants.Jens)) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_6(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact7");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals(Constants.Ralf) && father.equals(Constants.Lutz)) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query /is_father_of[in,in]
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_7(
        final test.nz.org.take.compiler.scenario6.Person son,
        final test.nz.org.take.compiler.scenario6.Person father,
        final DerivationController _derivation) {
        _derivation.log("fact8");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals(Constants.Werner) && father.equals(Constants.Otto)) {
            return result;
        }

        return null;
    }
}
