package test.nz.org.take.compiler.scenario1.generated;

import nz.org.take.rt.*;

import java.util.Iterator;


/**
 * Class generated by the take compiler.
 * @version Mon May 07 15:13:33 NZST 2007
 */
@SuppressWarnings("unchecked")
public class _KB {
    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> getFather(final java.lang.String son) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(getFather(son, _derivation),
                _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> getFather(final java.lang.String son,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@1358f03
                    case 0:
                        return getFather_0(son,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1402d5a
                    case 1:
                        return getFather_1(son,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@61736e
                    case 2:
                        return getFather_2(son,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1e13e07
                    case 3:
                        return getFather_3(son,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@af72d8
                    case 4:
                        return getFather_4(son,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@9cfec1
                    case 5:
                        return getFather_5(son,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@11946c2
                    case 6:
                        return getFather_6(son,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@747fa2
                    case 7:
                        return getFather_7(son,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@1358f03
                    case 0:
                        return "fact1";

                    // nz.org.take.Fact@1402d5a
                    case 1:
                        return "fact2";

                    // nz.org.take.Fact@61736e
                    case 2:
                        return "fact3";

                    // nz.org.take.Fact@1e13e07
                    case 3:
                        return "fact4";

                    // nz.org.take.Fact@af72d8
                    case 4:
                        return "fact5";

                    // nz.org.take.Fact@9cfec1
                    case 5:
                        return "fact6";

                    // nz.org.take.Fact@11946c2
                    case 6:
                        return "fact7";

                    // nz.org.take.Fact@747fa2
                    case 7:
                        return "fact8";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_0(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("fact1");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals("Frank")) {
            result.father = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_1(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("fact2");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals("Guenther")) {
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_2(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("fact3");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals("Jens")) {
            result.father = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_3(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("fact4");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals("Lutz")) {
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_4(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("fact5");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals("Klaus")) {
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_5(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("fact6");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals("Max")) {
            result.father = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_6(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("fact7");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals("Ralf")) {
            result.father = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getFather_7(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("fact8");

        IsFatherOf result = new IsFatherOf();
        result.son = son;

        if (son.equals("Werner")) {
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> getSons(final java.lang.String father) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(getSons(father,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> getSons(
        final java.lang.String father, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@1358f03
                    case 0:
                        return getSons_0(father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1402d5a
                    case 1:
                        return getSons_1(father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@61736e
                    case 2:
                        return getSons_2(father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1e13e07
                    case 3:
                        return getSons_3(father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@af72d8
                    case 4:
                        return getSons_4(father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@9cfec1
                    case 5:
                        return getSons_5(father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@11946c2
                    case 6:
                        return getSons_6(father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@747fa2
                    case 7:
                        return getSons_7(father,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@1358f03
                    case 0:
                        return "fact1";

                    // nz.org.take.Fact@1402d5a
                    case 1:
                        return "fact2";

                    // nz.org.take.Fact@61736e
                    case 2:
                        return "fact3";

                    // nz.org.take.Fact@1e13e07
                    case 3:
                        return "fact4";

                    // nz.org.take.Fact@af72d8
                    case 4:
                        return "fact5";

                    // nz.org.take.Fact@9cfec1
                    case 5:
                        return "fact6";

                    // nz.org.take.Fact@11946c2
                    case 6:
                        return "fact7";

                    // nz.org.take.Fact@747fa2
                    case 7:
                        return "fact8";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_0(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("fact1");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals("Lutz")) {
            result.son = "Frank";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_1(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("fact2");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals("Otto")) {
            result.son = "Guenther";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_2(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("fact3");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals("Klaus")) {
            result.son = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_3(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("fact4");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals("Otto")) {
            result.son = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_4(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("fact5");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals("Otto")) {
            result.son = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_5(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("fact6");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals("Jens")) {
            result.son = "Max";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_6(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("fact7");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals("Lutz")) {
            result.son = "Ralf";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf getSons_7(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("fact8");

        IsFatherOf result = new IsFatherOf();
        result.father = father;

        if (father.equals("Otto")) {
            result.son = "Werner";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@1756285f
     * @param grandson input parameter generated from slot 0
     * @return an iterator for instances of IsGrandfatherOf
    */
    public ResultSet<IsGrandfatherOf> getGrandfather(
        final java.lang.String grandson) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsGrandfatherOf> _result = new ResultSet(getGrandfather(
                    grandson, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@1756285f
     * @param grandson input parameter generated from slot 0
     * @return an iterator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandfather(
        final java.lang.String grandson, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsGrandfatherOf> result = new IteratorChain<IsGrandfatherOf>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@6782a9
                    case 0:
                        return getGrandfather_0(grandson,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@6782a9
                    case 0:
                        return "rule2";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@1756285f
     * @param grandson input parameter generated from slot 0
     * @return an iterator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandfather_0(
        final java.lang.String grandson, final DerivationController _derivation) {
        _derivation.log("rule2"); // Variable bindings in rule: nz.org.take.DerivationRule@6782a9
        class bindingsInRule1 {
            // Property generated for term  "nz.org.take.Variable@17a4989"
            java.lang.String p1;

            // Property generated for term  "nz.org.take.Variable@17200b4"
            java.lang.String p2;

            // Property generated for term  "nz.org.take.Variable@18c3679"
            java.lang.String p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = grandson;

        // code for prereq nz.org.take.Prerequisite@18c74
        final ResourceIterator<IsFatherOf> iterator1 = getFather(grandson,
                _derivation.increaseDepth());

        // code for prereq nz.org.take.Prerequisite@1ac3379
        final ResourceIterator<IsFatherOf> iterator2 = new NestedIterator<IsFatherOf, IsFatherOf>(iterator1) {
                public ResourceIterator<IsFatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p1 = object.son;
                    bindings.p2 = object.father;

                    return getFather(bindings.p2, _derivation.increaseDepth());
                }
            };

        // code for prereq nz.org.take.Fact@6779e6
        final ResourceIterator<IsGrandfatherOf> iterator3 = new NestedIterator<IsFatherOf, IsGrandfatherOf>(iterator2) {
                public ResourceIterator<IsGrandfatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p2 = object.son;
                    bindings.p3 = object.father;

                    return new SingletonIterator(new IsGrandfatherOf(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@1756285f
     * @param grandfather input parameter generated from slot 1
     * @return an iterator for instances of IsGrandfatherOf
    */
    public ResultSet<IsGrandfatherOf> getGrandchildren(
        final java.lang.String grandfather) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsGrandfatherOf> _result = new ResultSet(getGrandchildren(
                    grandfather, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@1756285f
     * @param grandfather input parameter generated from slot 1
     * @return an iterator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandchildren(
        final java.lang.String grandfather,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsGrandfatherOf> result = new IteratorChain<IsGrandfatherOf>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@6782a9
                    case 0:
                        return getGrandchildren_0(grandfather,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@6782a9
                    case 0:
                        return "rule2";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@1756285f
     * @param grandfather input parameter generated from slot 1
     * @return an iterator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandchildren_0(
        final java.lang.String grandfather,
        final DerivationController _derivation) {
        _derivation.log("rule2"); // Variable bindings in rule: nz.org.take.DerivationRule@6782a9
        class bindingsInRule1 {
            // Property generated for term  "nz.org.take.Variable@17a4989"
            java.lang.String p1;

            // Property generated for term  "nz.org.take.Variable@17200b4"
            java.lang.String p2;

            // Property generated for term  "nz.org.take.Variable@18c3679"
            java.lang.String p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p3 = grandfather;

        // code for prereq nz.org.take.Prerequisite@18c74
        final ResourceIterator<IsFatherOf> iterator1 = is_father_of_00(_derivation.increaseDepth());

        // code for prereq nz.org.take.Prerequisite@1ac3379
        final ResourceIterator<IsFatherOf> iterator2 = new NestedIterator<IsFatherOf, IsFatherOf>(iterator1) {
                public ResourceIterator<IsFatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p1 = object.son;
                    bindings.p2 = object.father;

                    return is_father_of_11(bindings.p2, bindings.p3,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq nz.org.take.Fact@6779e6
        final ResourceIterator<IsGrandfatherOf> iterator3 = new NestedIterator<IsFatherOf, IsGrandfatherOf>(iterator2) {
                public ResourceIterator<IsGrandfatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p2 = object.son;
                    bindings.p3 = object.father;

                    return new SingletonIterator(new IsGrandfatherOf(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> is_father_of_00() {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(is_father_of_00(
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> is_father_of_00(
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@1358f03
                    case 0:
                        return is_father_of_00_0(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@1402d5a
                    case 1:
                        return is_father_of_00_1(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@61736e
                    case 2:
                        return is_father_of_00_2(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@1e13e07
                    case 3:
                        return is_father_of_00_3(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@af72d8
                    case 4:
                        return is_father_of_00_4(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@9cfec1
                    case 5:
                        return is_father_of_00_5(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@11946c2
                    case 6:
                        return is_father_of_00_6(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@747fa2
                    case 7:
                        return is_father_of_00_7(_derivation.reset(
                                _derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@1358f03
                    case 0:
                        return "fact1";

                    // nz.org.take.Fact@1402d5a
                    case 1:
                        return "fact2";

                    // nz.org.take.Fact@61736e
                    case 2:
                        return "fact3";

                    // nz.org.take.Fact@1e13e07
                    case 3:
                        return "fact4";

                    // nz.org.take.Fact@af72d8
                    case 4:
                        return "fact5";

                    // nz.org.take.Fact@9cfec1
                    case 5:
                        return "fact6";

                    // nz.org.take.Fact@11946c2
                    case 6:
                        return "fact7";

                    // nz.org.take.Fact@747fa2
                    case 7:
                        return "fact8";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_0(final DerivationController _derivation) {
        _derivation.log("fact1");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = "Frank";
            result.father = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_1(final DerivationController _derivation) {
        _derivation.log("fact2");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = "Guenther";
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_2(final DerivationController _derivation) {
        _derivation.log("fact3");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = "Jens";
            result.father = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_3(final DerivationController _derivation) {
        _derivation.log("fact4");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = "Lutz";
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_4(final DerivationController _derivation) {
        _derivation.log("fact5");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = "Klaus";
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_5(final DerivationController _derivation) {
        _derivation.log("fact6");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = "Max";
            result.father = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_6(final DerivationController _derivation) {
        _derivation.log("fact7");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = "Ralf";
            result.father = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_00_7(final DerivationController _derivation) {
        _derivation.log("fact8");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.son = "Werner";
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> is_father_of_11(final java.lang.String son,
        final java.lang.String father) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(is_father_of_11(son,
                    father, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> is_father_of_11(
        final java.lang.String son, final java.lang.String father,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@1358f03
                    case 0:
                        return is_father_of_11_0(son, father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1402d5a
                    case 1:
                        return is_father_of_11_1(son, father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@61736e
                    case 2:
                        return is_father_of_11_2(son, father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1e13e07
                    case 3:
                        return is_father_of_11_3(son, father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@af72d8
                    case 4:
                        return is_father_of_11_4(son, father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@9cfec1
                    case 5:
                        return is_father_of_11_5(son, father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@11946c2
                    case 6:
                        return is_father_of_11_6(son, father,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@747fa2
                    case 7:
                        return is_father_of_11_7(son, father,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@1358f03
                    case 0:
                        return "fact1";

                    // nz.org.take.Fact@1402d5a
                    case 1:
                        return "fact2";

                    // nz.org.take.Fact@61736e
                    case 2:
                        return "fact3";

                    // nz.org.take.Fact@1e13e07
                    case 3:
                        return "fact4";

                    // nz.org.take.Fact@af72d8
                    case 4:
                        return "fact5";

                    // nz.org.take.Fact@9cfec1
                    case 5:
                        return "fact6";

                    // nz.org.take.Fact@11946c2
                    case 6:
                        return "fact7";

                    // nz.org.take.Fact@747fa2
                    case 7:
                        return "fact8";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_0(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("fact1");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals("Frank") && father.equals("Lutz")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_1(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("fact2");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals("Guenther") && father.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_2(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("fact3");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals("Jens") && father.equals("Klaus")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_3(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("fact4");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals("Lutz") && father.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_4(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("fact5");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals("Klaus") && father.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_5(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("fact6");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals("Max") && father.equals("Jens")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_6(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("fact7");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals("Ralf") && father.equals("Lutz")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@7c1dc19d
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an iterator for instances of IsFatherOf
    */
    private IsFatherOf is_father_of_11_7(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("fact8");

        IsFatherOf result = new IsFatherOf();
        result.son = son;
        result.father = father;

        if (son.equals("Werner") && father.equals("Otto")) {
            return result;
        }

        return null;
    }
}
