
options {
	IGNORE_CASE = true;
}
PARSER_BEGIN(Parser) 
   package nz.org.take.script.parser;
	import nz.org.take.script.*;
	public class Parser{
		Script select = new Script();
		public static void main(String[] args) throws ParseException,TokenMgrError {
			Parser parser = new Parser(System.in);
			parser.parse(new Script());
		}
	}
PARSER_END(Parser)

SKIP:{" "}
SKIP:{"\n"|"\r"|"\r\n"}
TOKEN:{<DOT:".">}
TOKEN:{<EQ:"=">}
TOKEN:{<COL:":">}
TOKEN:{<VAR:"var">}
TOKEN:{<NOT:"not">}
TOKEN:{<REF:"ref">}
TOKEN:{<AND:"and">}
TOKEN:{<IF:"if">}
TOKEN:{<THEN:"then">}
TOKEN:{<QUERY:"query">}
TOKEN:{<IN:"in">}
TOKEN:{<OUT:"out">}
TOKEN:{<GLOBALANNOTATION: "@@"(["a"-"z","A"-"Z","_","-","?",":","=","#","*","%","_","/",",","\\",";","!","0"-"9"," ","."] )*>}
TOKEN:{<LOCALANNOTATION: "@"(["a"-"z","A"-"Z","_","-","?",":","=","#","*","%","_","/",",","\\",";","!","0"-"9"," ","."] )*>}
TOKEN:{<INTEGER_NUMBER:(["0"-"9"])+>}
TOKEN:{<DECIMAL_NUMBER:(["0"-"9"])+("."(["0"-"9"])+)?>}
TOKEN:{<LABEL: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*":" >}
TOKEN:{<NAME: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )* >}
TOKEN:{<COMMENT: "//"(["a"-"z","A"-"Z","_","-","?","#","*","%","_","/",",","\\",";","!","@","0"-"9"," "] )* >}
TOKEN:{<STRING_LITERAL:"\"" (["a"-"z","A"-"Z","_","-","?","#","*","%","_","/",",","\\",";","!","@","0"-"9"," "] )* "\"">}
TOKEN:{<WHITESPACE: (" ")+>}
TOKEN:{<SEMICOLON:";">}
TOKEN:{<COMPARISON:"<="|">="|"<"|">"|"=="|"!=">}


void parse(Script script):
{}
{
	(var(script)|ref(script)|comment(script)|globalannotation(script)|localannotation(script)|query(script)|rule(script))*
}
void localannotation(Script script):
{
	Token t;
}
{
	{Annotation a = new Annotation();}
	t = <GLOBALANNOTATION>
	{a.setGlobal(true);}
	{a.setAnnotation(t.image.substring(2));}
	{a.setPosition(t.beginLine,t.beginColumn);}
	{script.add(a);}
}
void globalannotation(Script script):
{
	Token t;
}
{
	{Annotation a = new Annotation();}
	t = <LOCALANNOTATION>
	{a.setGlobal(false);}
	{a.setAnnotation(t.image.substring(1));}
	{a.setPosition(t.beginLine,t.beginColumn);}
	{script.add(a);}
}
void comment(Script script):
{
	Token t;
}
{
	{Comment c = new Comment();}
	t=<COMMENT>
	{c.setText(t.image.substring(2));}
	{c.setPosition(t.beginLine,t.beginColumn);}
	{script.add(c);}
}
void query(Script script):
{
	Token t;
}
{
	{QuerySpec q = new QuerySpec();}
	t=<QUERY> [negated(q)] predicateQ(q)"["io(q)(","io(q))*"]"
	{q.setPosition(t.beginLine,t.beginColumn);}
	{script.add(q);}
}
void negated(QuerySpec q):
{
	Token t;
}
{
	t = <NOT>
	{q.setNegated(true);}
}
void predicateQ(QuerySpec q):
{
	Token t;
}
{
	t = <NAME>
	{q.setPredicate(t.image);}
}
void io(QuerySpec q):
{}
{
	in(q)|out(q)
}
void in(QuerySpec q):
{
	Token t;
}
{
	t = <IN>
	{q.addToIOSpec(true);}
}
void out(QuerySpec q):
{
	Token t;
}
{
	t = <OUT>
	{q.addToIOSpec(false);}
}
void var(Script script):
{
	Token t;
}
{
	{VariableDeclaration v = new VariableDeclaration();}
	t=<VAR> dectype(v)(<DOT>dectype(v))* decname(v) (","decname(v))*
	{v.setPosition(t.beginLine,t.beginColumn);}
	{script.add(v);}
}
void ref(Script script):
{
	Token t;
}
{
	{RefDeclaration r = new RefDeclaration();}
	t=<REF> dectype(r)(<DOT>dectype(r))* decname(r) (","decname(r))*
	{r.setPosition(t.beginLine,t.beginColumn);}
	{script.add(r);}
}
void dectype(Declaration d):
{
	Token t;
}
{
	t = <NAME>
	{d.addToType(t.image);}
}
void decname(Declaration d):
{
	Token t;
}
{
	t = <NAME>
	{d.addName(t.image);}
}
void rule(Script script):
{}
{
	{Rule r = new Rule();}	
	id(r)[<IF> condition(r) ( <AND> condition(r))* <THEN>]  condition(r)
	{script.add(r);}
	
}
void id(Rule r):
{
	Token t;
}
{
	t = <LABEL>
	{r.setId(t.image.substring(0,t.image.length()-1));}
}
void condition(Rule r):
{}
{	
	{Condition c = new Condition();}	
	buildCondition(c)
	{r.add(c);}
}
void buildCondition(Condition c):
{}
{
	LOOKAHEAD(buildCondition2(c))
	buildCondition2(c)
	|
	buildCondition1(c)
}
void buildCondition1(Condition c):
{}
{
	term(c)comparison(c)term(c)
}
void buildCondition2(Condition c):
{}
{
	[negation(c)]predicate(c)"["terms(c)"]"
}
void negation(Condition c):
{
	Token t;
}
{
	t = <NOT>
	{c.setNegated(true);}
}
void terms(TermContainer c):
{}
{
	term(c)
	(","term(c))*
}
void term(TermContainer c):
{}
{
	LOOKAHEAD(3)
	complexTerm(c) | simpleTerm(c)
}
void simpleTerm(TermContainer c):
{}
{
	variableTerm(c) | stringLiteral(c) | intLiteral(c) | doubleLiteral(c)
}
void variableTerm(TermContainer c) :
{
	Token t;
}
{
	{VariableTerm v = new VariableTerm();}	
	t = <NAME>
	{v.setName(t.image);}
	{v.setPosition(t.beginLine,t.beginColumn);}
	{c.add(v);}
}
void stringLiteral(TermContainer c) :
{
	Token t;
}
{
	{ConstantTerm v = new ConstantTerm();}	
	t = <STRING_LITERAL>
	{v.setValue(t.image.substring(1,t.image.length()-1));}
	{v.setType("java.lang.String");}
	{v.setPosition(t.beginLine,t.beginColumn);}
	{c.add(v);}
	
}
void intLiteral(TermContainer c) :
{
	Token t;
}
{
	{ConstantTerm v = new ConstantTerm();}	
	t = <INTEGER_NUMBER>
	{v.setValue(t.image);}
	{v.setType("java.lang.Integer");}
	{v.setPosition(t.beginLine,t.beginColumn);}
	{c.add(v);}
	
}
void doubleLiteral(TermContainer c) :
{
	Token t;
}
{
	{ConstantTerm v = new ConstantTerm();}	
	t = <DECIMAL_NUMBER>
	{v.setValue(t.image);}
	{v.setType("java.lang.Double");}
	{v.setPosition(t.beginLine,t.beginColumn);}
	{c.add(v);}
	
}
void complexTerm(TermContainer c) :
{
}
{
	{ComplexTerm ct = new ComplexTerm();}	
	function(ct)"("terms(ct)")"
	{c.add(ct);}
}
void function(ComplexTerm ct) :
{
	Token t;
}
{	
	t = <NAME>
	{ct.setPosition(t.beginLine,t.beginColumn);}
	{ct.setFunction(t.image);}	
}
void predicate(Condition c) :
{
	Token t;
}
{	
	t = <NAME>
	{c.setPosition(t.beginLine,t.beginColumn);}
	{c.setPredicate(t.image);}	
	{c.setPrimitiveComparison(false);}
}
void comparison(Condition c) :
{
	Token t;
}
{	
	t = <COMPARISON>
	{c.setPosition(t.beginLine,t.beginColumn);}
	{c.setPredicate(t.image);}	
	{c.setPrimitiveComparison(true);}
}