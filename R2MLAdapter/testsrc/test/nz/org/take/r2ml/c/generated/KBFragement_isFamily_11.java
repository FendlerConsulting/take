package test.nz.org.take.r2ml.c.generated;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Tue Nov 20 16:02:05 GMT+01:00 2007
 */
@SuppressWarnings("unchecked")
class KBFragement_isFamily_11 {
    /**
     * Method generated for query /isFamily[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of isFamily
    */
    public static ResultSet<isFamily> isFamily_11(
        final test.nz.org.take.r2ml.c.Person slot1,
        final test.nz.org.take.r2ml.c.Person slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<isFamily> _result = new ResultSet(KBFragement_isFamily_11.isFamily_11(
                    slot1, slot2, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /isFamily[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of isFamily
    */
    static ResourceIterator<isFamily> isFamily_11(
        final test.nz.org.take.r2ml.c.Person slot1,
        final test.nz.org.take.r2ml.c.Person slot2,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<isFamily> result = new IteratorChain<isFamily>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // equalityTestRule  IF lastname(<person1>,<lastname1>) AND lastname(<person2>,<lastname2>) AND equals(<lastname1>,<lastname2>) AND equals(<lastname2>,<lastname1>) THEN /isFamily(<person1>,<person2>)
                    case 0:
                        return isFamily_11_0(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // equalityTestRule  IF lastname(<person1>,<lastname1>) AND lastname(<person2>,<lastname2>) AND equals(<lastname1>,<lastname2>) AND equals(<lastname2>,<lastname1>) THEN /isFamily(<person1>,<person2>)
                    case 0:
                        return "equalityTestRule";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /isFamily[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of isFamily
    */
    private static ResourceIterator<isFamily> isFamily_11_0(
        final test.nz.org.take.r2ml.c.Person slot1,
        final test.nz.org.take.r2ml.c.Person slot2,
        final DerivationController _derivation) {
        _derivation.log("equalityTestRule", DerivationController.RULE, slot1,
            slot2);

        // Variable bindings in rule:  IF lastname(<person1>,<lastname1>) AND lastname(<person2>,<lastname2>) AND equals(<lastname1>,<lastname2>) AND equals(<lastname2>,<lastname1>) THEN /isFamily(<person1>,<person2>)
        class bindingsInRule1 {
            // Property generated for term  "<person1>"
            test.nz.org.take.r2ml.c.Person p1;

            // Property generated for term  "<person2>"
            test.nz.org.take.r2ml.c.Person p2;

            // Property generated for term  "<lastname2>"
            java.lang.String p3;

            // Property generated for term  "<lastname1>"
            java.lang.String p4;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = slot1;
        bindings.p2 = slot2;

        // code for prereq lastname(<person1>,<lastname1>)
        final ResourceIterator<lastname> iterator1 = KBFragement_lastname_10.lastname_10(slot1,
                _derivation.increaseDepth());

        // code for prereq lastname(<person2>,<lastname2>)
        final ResourceIterator<lastname> iterator2 = new NestedIterator<lastname, lastname>(iterator1) {
                public ResourceIterator<lastname> getNextIterator(
                    lastname object) {
                    bindings.p1 = object.slot1;
                    bindings.p4 = object.slot2;

                    return KBFragement_lastname_10.lastname_10(bindings.p2,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq equals(<lastname1>,<lastname2>)
        final ResourceIterator<equals> iterator3 = new NestedIterator<lastname, equals>(iterator2) {
                public ResourceIterator<equals> getNextIterator(lastname object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = object.slot2;

                    return KBFragement_equals_11.equals_11(bindings.p4,
                        bindings.p3, _derivation.increaseDepth());
                }
            };

        // code for prereq equals(<lastname2>,<lastname1>)
        final ResourceIterator<equals> iterator4 = new NestedIterator<equals, equals>(iterator3) {
                public ResourceIterator<equals> getNextIterator(equals object) {
                    bindings.p4 = object.slot1;
                    bindings.p3 = (java.lang.String) object.slot2;

                    return KBFragement_equals_11.equals_11(bindings.p3,
                        bindings.p4, _derivation.increaseDepth());
                }
            };

        // code for prereq /isFamily(<person1>,<person2>)
        final ResourceIterator<isFamily> iterator5 = new NestedIterator<equals, isFamily>(iterator4) {
                public ResourceIterator<isFamily> getNextIterator(equals object) {
                    bindings.p3 = object.slot1;
                    bindings.p4 = (java.lang.String) object.slot2;

                    return new SingletonIterator(new isFamily(bindings.p1,
                            bindings.p2));
                }
            };

        return iterator5;
    }
}
