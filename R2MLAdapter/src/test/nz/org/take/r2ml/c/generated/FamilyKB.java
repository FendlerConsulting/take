package test.nz.org.take.r2ml.c.generated;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Thu Jun 14 19:11:41 NZST 2007
 */
@SuppressWarnings("unchecked")
public class FamilyKB {
    /**
     * Method generated for query /isFamily[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFamily
    */
    public ResultSet<_isFamily> isFamily_11(
        final test.nz.org.take.r2ml.c.Person slot1,
        final test.nz.org.take.r2ml.c.Person slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_isFamily> _result = new ResultSet(isFamily_11(slot1, slot2,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /isFamily[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFamily
    */
    private ResourceIterator<_isFamily> isFamily_11(
        final test.nz.org.take.r2ml.c.Person slot1,
        final test.nz.org.take.r2ml.c.Person slot2,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_isFamily> result = new IteratorChain<_isFamily>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    //  IF lastname(<person1>,<lastname1>) AND lastname(<person2>,<lastname2>) AND equals(<lastname1>,<lastname2>) AND equals(<lastname2>,<lastname1>) THEN /isFamily(<person1>,<person2>)
                    case 0:
                        return isFamily_11_0(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    //  IF lastname(<person1>,<lastname1>) AND lastname(<person2>,<lastname2>) AND equals(<lastname1>,<lastname2>) AND equals(<lastname2>,<lastname1>) THEN /isFamily(<person1>,<person2>)
                    case 0:
                        return "equalityTestRule";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /isFamily[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _isFamily
    */
    private ResourceIterator<_isFamily> isFamily_11_0(
        final test.nz.org.take.r2ml.c.Person slot1,
        final test.nz.org.take.r2ml.c.Person slot2,
        final DerivationController _derivation) {
        _derivation.log("equalityTestRule", DerivationController.RULE, slot1,
            slot2);

        // Variable bindings in rule:  IF lastname(<person1>,<lastname1>) AND lastname(<person2>,<lastname2>) AND equals(<lastname1>,<lastname2>) AND equals(<lastname2>,<lastname1>) THEN /isFamily(<person1>,<person2>)
        class bindingsInRule1 {
            // Property generated for term  "<person1>"
            test.nz.org.take.r2ml.c.Person p1;

            // Property generated for term  "<lastname1>"
            java.lang.String p2;

            // Property generated for term  "<person2>"
            test.nz.org.take.r2ml.c.Person p3;

            // Property generated for term  "<lastname2>"
            java.lang.String p4;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = slot1;
        bindings.p3 = slot2;

        // code for prereq lastname(<person1>,<lastname1>)
        final ResourceIterator<_lastname> iterator1 = lastname_10(slot1,
                _derivation.increaseDepth());

        // code for prereq lastname(<person2>,<lastname2>)
        final ResourceIterator<_lastname> iterator2 = new NestedIterator<_lastname, _lastname>(iterator1) {
                public ResourceIterator<_lastname> getNextIterator(
                    _lastname object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return lastname_10(bindings.p3, _derivation.increaseDepth());
                }
            };

        // code for prereq equals(<lastname1>,<lastname2>)
        final ResourceIterator<_equals> iterator3 = new NestedIterator<_lastname, _equals>(iterator2) {
                public ResourceIterator<_equals> getNextIterator(
                    _lastname object) {
                    bindings.p3 = object.slot1;
                    bindings.p4 = object.slot2;

                    return equals_11(bindings.p2, bindings.p4,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq equals(<lastname2>,<lastname1>)
        final ResourceIterator<_equals> iterator4 = new NestedIterator<_equals, _equals>(iterator3) {
                public ResourceIterator<_equals> getNextIterator(_equals object) {
                    bindings.p2 = object.slot1;
                    bindings.p4 = (java.lang.String) object.slot2;

                    return equals_11(bindings.p4, bindings.p2,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq /isFamily(<person1>,<person2>)
        final ResourceIterator<_isFamily> iterator5 = new NestedIterator<_equals, _isFamily>(iterator4) {
                public ResourceIterator<_isFamily> getNextIterator(
                    _equals object) {
                    bindings.p4 = object.slot1;
                    bindings.p2 = (java.lang.String) object.slot2;

                    return new SingletonIterator(new _isFamily(bindings.p1,
                            bindings.p3));
                }
            };

        return iterator5;
    }

    /**
     * Method generated for query lastname[in,out]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _lastname
    */
    public ResultSet<_lastname> lastname_10(
        final test.nz.org.take.r2ml.c.Person slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_lastname> _result = new ResultSet(lastname_10(slot1,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query lastname[in,out]
     * @param source
     * @return an iterator
     * code generated using velocity template nz/org/take/compiler/reference/PropertyPredicateONE2ONE_10.vm
    */
    private ResourceIterator<_lastname> lastname_10(
        final test.nz.org.take.r2ml.c.Person source,
        final DerivationController _derivation) {
        _derivation.log("property lastname",
            DerivationController.BEAN_PROPERTY, source, DerivationController.NIL);

        _lastname result = new _lastname();
        result.slot1 = source;
        result.slot2 = source.getLastname();

        return new SingletonIterator<_lastname>(result);
    }

    /**
    * Method generated for query equals[in,in]
    * @param slot1 input parameter generated from slot 0
    * @param slot2 input parameter generated from slot 1
    * @return an iterator for instances of _equals
    */
    public ResultSet<_equals> equals_11(final java.lang.String slot1,
        final java.lang.Object slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_equals> _result = new ResultSet(equals_11(slot1, slot2,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query equals[in,in]
     * @param source
     * @param target
     * @return an iterator
     * code generated using velocity template nz/org/take/compiler/reference/JPredicate_11.vm
    */
    private ResourceIterator<_equals> equals_11(final java.lang.String slot1,
        final java.lang.Object slot2, final DerivationController _derivation) {
        _derivation.log("public boolean java.lang.String.equals(java.lang.Object)",
            DerivationController.JAVA_METHOD);

        if (slot1.equals(slot2)) {
            _equals result = new _equals();
            result.slot1 = slot1;
            result.slot2 = slot2;

            return new SingletonIterator<_equals>(result);
        }

        return EmptyIterator.DEFAULT;
    }
}
