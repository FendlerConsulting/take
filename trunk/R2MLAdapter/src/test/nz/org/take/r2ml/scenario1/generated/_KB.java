package test.nz.org.take.r2ml.scenario1.generated;

import nz.org.take.rt.*;

import java.util.Iterator;


/**
 * Class generated by the take compiler.
 * @version Thu May 17 19:32:03 NZST 2007
 */
@SuppressWarnings("unchecked")
public class _KB {
    /**
     * Method generated for query /isEnrolled[in,in]
     * @param student input parameter generated from slot 0
     * @param college input parameter generated from slot 1
     * @return an iterator for instances of _isEnrolled
    */
    public ResultSet<_isEnrolled> isEnrolled_11(
        final test.nz.org.take.r2ml.scenario1.Student student,
        final test.nz.org.take.r2ml.scenario1.College college) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_isEnrolled> _result = new ResultSet(isEnrolled_11(student,
                    college, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /isEnrolled[in,in]
     * @param student input parameter generated from slot 0
     * @param college input parameter generated from slot 1
     * @return an iterator for instances of _isEnrolled
    */
    private ResourceIterator<_isEnrolled> isEnrolled_11(
        final test.nz.org.take.r2ml.scenario1.Student student,
        final test.nz.org.take.r2ml.scenario1.College college,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_isEnrolled> result = new IteratorChain<_isEnrolled>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    //  IF /courses(<student>,<course>) AND /college(<course>,<college>) THEN /isEnrolled(<student>,<college>)
                    case 0:
                        return isEnrolled_11_0(student, college,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    //  IF /courses(<student>,<course>) AND /college(<course>,<college>) THEN /isEnrolled(<student>,<college>)
                    case 0:
                        return "DR000";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /isEnrolled[in,in]
     * @param student input parameter generated from slot 0
     * @param college input parameter generated from slot 1
     * @return an iterator for instances of _isEnrolled
    */
    private ResourceIterator<_isEnrolled> isEnrolled_11_0(
        final test.nz.org.take.r2ml.scenario1.Student student,
        final test.nz.org.take.r2ml.scenario1.College college,
        final DerivationController _derivation) {
        _derivation.log("DR000"); // Variable bindings in rule:  IF /courses(<student>,<course>) AND /college(<course>,<college>) THEN /isEnrolled(<student>,<college>)
        class bindingsInRule1 {
            // Property generated for term  "<student>"
            test.nz.org.take.r2ml.scenario1.Student p1;

            // Property generated for term  "<course>"
            test.nz.org.take.r2ml.scenario1.Course p2;

            // Property generated for term  "<college>"
            test.nz.org.take.r2ml.scenario1.College p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = student;
        bindings.p3 = college;

        // code for prereq /courses(<student>,<course>)
        final ResourceIterator<_courses> iterator1 = courses_10(student,
                _derivation.increaseDepth());

        // code for prereq /college(<course>,<college>)
        final ResourceIterator<_college> iterator2 = new NestedIterator<_courses, _college>(iterator1) {
                public ResourceIterator<_college> getNextIterator(
                    _courses object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return college_11(bindings.p2, bindings.p3,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq /isEnrolled(<student>,<college>)
        final ResourceIterator<_isEnrolled> iterator3 = new NestedIterator<_college, _isEnrolled>(iterator2) {
                public ResourceIterator<_isEnrolled> getNextIterator(
                    _college object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = object.slot2;

                    return new SingletonIterator(new _isEnrolled(bindings.p1,
                            bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query /isEnrolled[in,out]
     * @param student input parameter generated from slot 0
     * @return an iterator for instances of _isEnrolled
    */
    public ResultSet<_isEnrolled> isEnrolled_10(
        final test.nz.org.take.r2ml.scenario1.Student student) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_isEnrolled> _result = new ResultSet(isEnrolled_10(student,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /isEnrolled[in,out]
     * @param student input parameter generated from slot 0
     * @return an iterator for instances of _isEnrolled
    */
    private ResourceIterator<_isEnrolled> isEnrolled_10(
        final test.nz.org.take.r2ml.scenario1.Student student,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_isEnrolled> result = new IteratorChain<_isEnrolled>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    //  IF /courses(<student>,<course>) AND /college(<course>,<college>) THEN /isEnrolled(<student>,<college>)
                    case 0:
                        return isEnrolled_10_0(student,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    //  IF /courses(<student>,<course>) AND /college(<course>,<college>) THEN /isEnrolled(<student>,<college>)
                    case 0:
                        return "DR000";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /isEnrolled[in,out]
     * @param student input parameter generated from slot 0
     * @return an iterator for instances of _isEnrolled
    */
    private ResourceIterator<_isEnrolled> isEnrolled_10_0(
        final test.nz.org.take.r2ml.scenario1.Student student,
        final DerivationController _derivation) {
        _derivation.log("DR000"); // Variable bindings in rule:  IF /courses(<student>,<course>) AND /college(<course>,<college>) THEN /isEnrolled(<student>,<college>)
        class bindingsInRule1 {
            // Property generated for term  "<student>"
            test.nz.org.take.r2ml.scenario1.Student p1;

            // Property generated for term  "<course>"
            test.nz.org.take.r2ml.scenario1.Course p2;

            // Property generated for term  "<college>"
            test.nz.org.take.r2ml.scenario1.College p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = student;

        // code for prereq /courses(<student>,<course>)
        final ResourceIterator<_courses> iterator1 = courses_10(student,
                _derivation.increaseDepth());

        // code for prereq /college(<course>,<college>)
        final ResourceIterator<_college> iterator2 = new NestedIterator<_courses, _college>(iterator1) {
                public ResourceIterator<_college> getNextIterator(
                    _courses object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return college_10(bindings.p2, _derivation.increaseDepth());
                }
            };

        // code for prereq /isEnrolled(<student>,<college>)
        final ResourceIterator<_isEnrolled> iterator3 = new NestedIterator<_college, _isEnrolled>(iterator2) {
                public ResourceIterator<_isEnrolled> getNextIterator(
                    _college object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = object.slot2;

                    return new SingletonIterator(new _isEnrolled(bindings.p1,
                            bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query /courses[in,out]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _courses
    */
    public ResultSet<_courses> courses_10(
        final test.nz.org.take.r2ml.scenario1.Student slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_courses> _result = new ResultSet(courses_10(slot1,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /courses[in,out]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _courses
    */
    private ResourceIterator<_courses> courses_10(
        final test.nz.org.take.r2ml.scenario1.Student slot1,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_courses> result = new IteratorChain<_courses>(0) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /college[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _college
    */
    public ResultSet<_college> college_11(
        final test.nz.org.take.r2ml.scenario1.Course slot1,
        final test.nz.org.take.r2ml.scenario1.College slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_college> _result = new ResultSet(college_11(slot1, slot2,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /college[in,in]
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an iterator for instances of _college
    */
    private ResourceIterator<_college> college_11(
        final test.nz.org.take.r2ml.scenario1.Course slot1,
        final test.nz.org.take.r2ml.scenario1.College slot2,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_college> result = new IteratorChain<_college>(0) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query /college[in,out]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _college
    */
    public ResultSet<_college> college_10(
        final test.nz.org.take.r2ml.scenario1.Course slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_college> _result = new ResultSet(college_10(slot1,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /college[in,out]
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _college
    */
    private ResourceIterator<_college> college_10(
        final test.nz.org.take.r2ml.scenario1.Course slot1,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_college> result = new IteratorChain<_college>(0) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla
}
