<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:r2ml="http://www.rewerse.net/I1/2006/R2ML" targetNamespace="http://www.rewerse.net/I1/2006/R2ML" elementFormDefault="qualified" attributeFormDefault="qualified" version="0.4" xml:lang="en">
 <!-- 

Elements  for formulas 

-->
 <xs:element name="LogicalFormula" type="r2ml:LogicalFormula" abstract="true"/>
 <xs:element name="Implication" type="r2ml:Implication" abstract="false" substitutionGroup="r2ml:LogicalFormula"/>
 <xs:element name="Conjunction" type="r2ml:Conjunction" abstract="false" substitutionGroup="r2ml:LogicalFormula"/>
 <xs:element name="Disjunction" type="r2ml:Disjunction" abstract="false" substitutionGroup="r2ml:LogicalFormula"/>
 <xs:element name="Negation" type="r2ml:Negation" abstract="true" substitutionGroup="r2ml:LogicalFormula"/>
 <xs:element name="StrongNegation" type="r2ml:StrongNegation" abstract="false" substitutionGroup="r2ml:Negation"/>
 <xs:element name="NegationAsFailure" type="r2ml:NegationAsFailure" abstract="false" substitutionGroup="r2ml:Negation"/>
 <xs:element name="QuantifiedFormula" type="r2ml:QuantifiedFormula" abstract="true" substitutionGroup="r2ml:LogicalFormula"/>
 <xs:element name="UniversallyQuantifiedFormula" type="r2ml:UniversallyQuantifiedFormula" abstract="false" substitutionGroup="r2ml:QuantifiedFormula"/>
 <xs:element name="ExistentiallyQuantifiedFormula" type="r2ml:ExistentiallyQuantifiedFormula" abstract="false" substitutionGroup="r2ml:QuantifiedFormula"/>
 <xs:element name="AtLeastQuantifiedFormula" type="r2ml:AtLeastQuantifiedFormula" abstract="false" substitutionGroup="r2ml:QuantifiedFormula"/>
 <xs:element name="AtMostQuantifiedFormula" type="r2ml:AtMostQuantifiedFormula" abstract="false" substitutionGroup="r2ml:QuantifiedFormula"/>
 <xs:element name="AtLeastAndAtMostQuantifiedFormula" type="r2ml:AtLeastAndAtMostQuantifiedFormula" abstract="false" substitutionGroup="r2ml:QuantifiedFormula"/>
 <!-- 

Elements for quantifier free formulas

-->
 <xs:element name="qf.DNF" type="r2ml:qf.DNF" abstract="true"/>
 <xs:element name="qf.LiteralConjunction" type="r2ml:qf.LiteralConjunction" abstract="false" substitutionGroup="r2ml:qf.DNF"/>
 <xs:element name="qf.AndOrNafNegFormula" type="r2ml:qf.AndOrNafNegFormula" abstract="true" substitutionGroup="r2ml:LogicalFormula"/>
 <xs:element name="qf.Conjunction" type="r2ml:qf.Conjunction" abstract="false" substitutionGroup="r2ml:qf.AndOrNafNegFormula"/>
 <xs:element name="qf.Disjunction" type="r2ml:qf.Disjunction" abstract="false" substitutionGroup="r2ml:qf.AndOrNafNegFormula"/>
 <xs:element name="qf.Negation" type="r2ml:qf.Negation" abstract="false" substitutionGroup="r2ml:qf.AndOrNafNegFormula"/>
 <xs:element name="qf.StrongNegation" type="r2ml:qf.StrongNegation" abstract="false" substitutionGroup="r2ml:qf.Negation"/>
 <xs:element name="qf.NegationAsFailure" type="r2ml:qf.NegationAsFailure" abstract="false" substitutionGroup="r2ml:qf.Negation"/>
 <!--

Elements for core atoms 

-->
 <xs:element name="Atom" type="r2ml:Atom" abstract="true" substitutionGroup="r2ml:qf.AndOrNafNegFormula"/>
 <xs:element name="GenericAtom" type="r2ml:GenericAtom" abstract="false" substitutionGroup="r2ml:Atom"/>
 <xs:element name="DataAtom" abstract="true" substitutionGroup="r2ml:Atom"/>
 <xs:element name="ObjectAtom" abstract="true" substitutionGroup="r2ml:Atom"/>
 <!-- 

Elements for R2ML basic atoms

-->
 <xs:element name="ObjectClassificationAtom" type="r2ml:ObjectClassificationAtom" substitutionGroup="r2ml:ObjectAtom"/>
 <xs:element name="EqualityAtom" type="r2ml:EqualityAtom" substitutionGroup="r2ml:ObjectAtom"/>
 <xs:element name="InequalityAtom" type="r2ml:InequalityAtom" substitutionGroup="r2ml:ObjectAtom"/>
 <xs:element name="DatatypePredicateAtom" type="r2ml:DatatypePredicateAtom" substitutionGroup="r2ml:DataAtom"/>
 <!-- 

Elements for R2ML relational atoms

-->
 <xs:element name="AttributionAtom" type="r2ml:AttributionAtom" substitutionGroup="r2ml:ObjectAtom"/>
 <xs:element name="ObjectDescriptionAtom" type="r2ml:ObjectDescriptionAtom" substitutionGroup="r2ml:ObjectAtom"/>
 <xs:element name="AssociationAtom" type="r2ml:AssociationAtom" substitutionGroup="r2ml:ObjectAtom"/>
 <xs:element name="PropertyAtom" type="r2ml:PropertyAtom" substitutionGroup="r2ml:ObjectAtom"/>
 <xs:element name="ReferencePropertyAtom" type="r2ml:ReferencePropertyAtom" substitutionGroup="r2ml:ObjectAtom"/>
 <xs:element name="DataClassificationAtom" type="r2ml:DataClassificationAtom" substitutionGroup="r2ml:DataAtom"/>
 <!--

Elements for constructing slots 

-->
 <xs:element name="Slot" type="r2ml:Slot" abstract="true" substitutionGroup="r2ml:Term"/>
 <xs:element name="ObjectSlot" type="r2ml:ObjectSlot" abstract="false" substitutionGroup="r2ml:Slot"/>
 <xs:element name="DataSlot" type="r2ml:DataSlot" abstract="false" substitutionGroup="r2ml:Slot"/>
 <!--

R2ML formulas 

-->
 <!-- LogicalFormula  -->
 <xs:complexType name="LogicalFormula" abstract="true"/>
 <!-- Implication -->
 <xs:complexType name="Implication" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:LogicalFormula">
    <xs:sequence>
     <xs:element ref="r2ml:antecedent"/>
     <xs:element ref="r2ml:consequent"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Conjunction -->
 <xs:complexType name="Conjunction" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:LogicalFormula">
    <xs:sequence>
     <xs:element ref="r2ml:LogicalFormula" minOccurs="2" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Disjunction -->
 <xs:complexType name="Disjunction" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:LogicalFormula">
    <xs:sequence>
     <xs:element ref="r2ml:LogicalFormula" minOccurs="2" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- negation-->
 <xs:complexType name="Negation" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:LogicalFormula"/>
  </xs:complexContent>
 </xs:complexType>
 <!-- Strong (explicit) negation -->
 <xs:complexType name="StrongNegation" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:Negation">
    <xs:sequence>
     <xs:element ref="r2ml:LogicalFormula"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Weak negation or NegationAsFailure -->
 <xs:complexType name="NegationAsFailure" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:Negation">
    <xs:sequence>
     <xs:element ref="r2ml:Atom"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- QuantifiedFormula -->
 <xs:complexType name="QuantifiedFormula" abstract="true">
  <xs:complexContent>
   <xs:extension base="r2ml:LogicalFormula">
    <xs:sequence>
     <xs:choice maxOccurs="unbounded">
      <xs:element ref="r2ml:GenericVariable" maxOccurs="unbounded"/>
      <xs:element ref="r2ml:ObjectVariable" maxOccurs="unbounded"/>
      <xs:element ref="r2ml:DataVariable" maxOccurs="unbounded"/>
     </xs:choice>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- UniversallyQuantifiedFormula -->
 <xs:complexType name="UniversallyQuantifiedFormula" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:QuantifiedFormula">
    <xs:sequence>
     <xs:element ref="r2ml:LogicalFormula"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- ExistentiallyQuantifiedFormula -->
 <xs:complexType name="ExistentiallyQuantifiedFormula" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:QuantifiedFormula">
    <xs:sequence>
     <xs:element ref="r2ml:LogicalFormula"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- -->
 <xs:complexType name="AtLeastQuantifiedFormula" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:QuantifiedFormula">
    <xs:sequence>
     <xs:element ref="r2ml:LogicalFormula"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:minCardinality"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- -->
 <xs:complexType name="AtMostQuantifiedFormula" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:QuantifiedFormula">
    <xs:sequence>
     <xs:element ref="r2ml:LogicalFormula"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:maxCardinality"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- -->
 <xs:complexType name="AtLeastAndAtMostQuantifiedFormula" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:QuantifiedFormula">
    <xs:sequence>
     <xs:element ref="r2ml:LogicalFormula"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:minCardinality"/>
    <xs:attribute ref="r2ml:maxCardinality"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- R2Ml quantifier free formulas -->
 <!-- DNF -->
 <xs:complexType name="qf.DNF" abstract="true"/>
 <!-- LiteralConjunction -->
 <xs:complexType name="qf.LiteralConjunction" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:qf.DNF">
    <xs:sequence>
     <xs:element ref="r2ml:Atom" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- AndOrNafNegFormula  (quantifier free) -->
 <xs:complexType name="qf.AndOrNafNegFormula" abstract="true">
  <xs:complexContent>
   <xs:restriction base="r2ml:LogicalFormula"/>
  </xs:complexContent>
 </xs:complexType>
 <!-- Conjunction (quantifier free)-->
 <xs:complexType name="qf.Conjunction" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:qf.AndOrNafNegFormula">
    <xs:sequence>
     <xs:element ref="r2ml:qf.AndOrNafNegFormula" minOccurs="2" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Disjunction (quantifier free)-->
 <xs:complexType name="qf.Disjunction" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:qf.AndOrNafNegFormula">
    <xs:sequence>
     <xs:element ref="r2ml:qf.AndOrNafNegFormula" minOccurs="2" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- negation (quantifier free)-->
 <xs:complexType name="qf.Negation" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:qf.AndOrNafNegFormula"/>
  </xs:complexContent>
 </xs:complexType>
 <!-- strong (explicit) negation (quantifier free)-->
 <xs:complexType name="qf.StrongNegation" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:qf.Negation">
    <xs:sequence>
     <xs:element ref="r2ml:Atom"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- weak negation or NegationAsFailure (quantifier free)-->
 <xs:complexType name="qf.NegationAsFailure" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:qf.Negation">
    <xs:sequence>
     <xs:element ref="r2ml:Atom"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- 
R2ML ATOMS 
-->
 <!-- Abstract Atom -->
 <xs:complexType name="Atom" abstract="true">
  <xs:complexContent>
   <xs:extension base="r2ml:qf.AndOrNafNegFormula">
    <xs:attribute ref="r2ml:isNegated" use="optional"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- DataAtom and ObjectAtom -->
 <xs:complexType name="DataAtom" abstract="true">
  <xs:complexContent>
   <xs:extension base="r2ml:Atom"/>
  </xs:complexContent>
 </xs:complexType>
 <xs:complexType name="ObjectAtom" abstract="true">
  <xs:complexContent>
   <xs:extension base="r2ml:Atom"/>
  </xs:complexContent>
 </xs:complexType>
 <!-- GenericAtom -->
 <xs:complexType name="GenericAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:Atom">
    <xs:sequence>
     <xs:element ref="r2ml:arguments"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:predicateID" use="required"/>
    <xs:attribute ref="r2ml:predicateType" use="optional"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- ObjectClassificationAtom - An object classification atom  refers to a class and consists of an object term.  -->
 <xs:complexType name="ObjectClassificationAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:ObjectAtom">
    <xs:sequence>
     <xs:element ref="r2ml:ObjectTerm"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:classID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- ObjectDescriptionAtom - An object description atom refers to a class as a base type and to zero or more classes as categories, and consists of a number of slots 
(object slots and data slots). Any instance of such atom refers to one particular object (the context argument).-->
 <xs:complexType name="ObjectDescriptionAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:ObjectAtom">
    <xs:sequence>
     <xs:element ref="r2ml:subject"/>
     <xs:choice maxOccurs="unbounded">
      <xs:element ref="r2ml:ObjectSlot" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="r2ml:DataSlot" minOccurs="0" maxOccurs="unbounded"/>
     </xs:choice>
    </xs:sequence>
    <xs:attribute ref="r2ml:baseType" use="optional"/>
    <xs:attribute ref="r2ml:classID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Asociation Atom  - An association atom  is constructed using an nary predicate as association predicate, a collection of data terms as ”data arguments” and a 
collection of object terms as ”object arguments”.-->
 <xs:complexType name="AssociationAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:ObjectAtom">
    <xs:all>
     <xs:element ref="r2ml:dataArguments" minOccurs="0"/>
     <xs:element ref="r2ml:objectArguments"/>
    </xs:all>
    <xs:attribute ref="r2ml:associationPredicateID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- PropertyAtom -->
 <xs:complexType name="PropertyAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:ObjectAtom">
    <xs:sequence>
     <xs:element ref="r2ml:subject"/>
     <xs:element ref="r2ml:value"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:propertyID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- ReferencePropertyAtom -->
 <xs:complexType name="ReferencePropertyAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:ObjectAtom">
    <xs:sequence>
     <xs:element ref="r2ml:subject"/>
     <xs:element ref="r2ml:object"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:referencePropertyID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Attribution Atom - An attribution atom has a reference to an attribute and consists of an object term as ”subject”, and a data term as ”value”.-->
 <xs:complexType name="AttributionAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:ObjectAtom">
    <xs:sequence>
     <xs:element ref="r2ml:subject"/>
     <xs:element ref="r2ml:dataValue"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:attributeID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- DataPredicateAtom -->
 <xs:complexType name="DatatypePredicateAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:DataAtom">
    <xs:sequence>
     <xs:element ref="r2ml:dataArguments"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:datatypePredicateID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Data classification atom -->
 <xs:complexType name="DataClassificationAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:DataAtom">
    <xs:sequence>
     <xs:element ref="r2ml:DataTerm"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:datatypeID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Equality Atom -->
 <xs:complexType name="EqualityAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:ObjectAtom">
    <xs:sequence>
     <xs:element ref="r2ml:ObjectTerm" minOccurs="2" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Inequality Atom -->
 <xs:complexType name="InequalityAtom" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:ObjectAtom">
    <xs:sequence>
     <xs:element ref="r2ml:ObjectTerm" minOccurs="2" maxOccurs="unbounded"/>
    </xs:sequence>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- R2ML Slots -->
 <!-- The abstract concept of  slot -->
 <xs:complexType name="Slot" abstract="true">
  <xs:complexContent>
   <xs:extension base="r2ml:Term"/>
  </xs:complexContent>
 </xs:complexType>
 <!-- Object slot -->
 <xs:complexType name="ObjectSlot" abstract="false">
  <xs:complexContent>
   <xs:extension base="r2ml:Slot">
    <xs:sequence>
     <xs:element ref="r2ml:object"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:referencePropertyID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- data slot -->
 <xs:complexType name="DataSlot">
  <xs:complexContent>
   <xs:extension base="r2ml:Slot">
    <xs:sequence>
     <xs:element ref="r2ml:value"/>
    </xs:sequence>
    <xs:attribute ref="r2ml:attributeID" use="required"/>
   </xs:extension>
  </xs:complexContent>
 </xs:complexType>
 <!-- Predicate type is an enumeration of supported predicates names in R2ML -->
 <xs:simpleType name="PredicateType">
  <xs:restriction base="xs:string">
   <xs:enumeration value="ReferencePropertyPredicate"/>
   <xs:enumeration value="ObjectClassificationPredicate"/>
   <xs:enumeration value="AttributionPredicate"/>
   <xs:enumeration value="AssociationPredicate"/>
   <xs:enumeration value="EqualityPredicate"/>
   <xs:enumeration value="InequalityPredicate"/>
   <xs:enumeration value="DatatypePredicate"/>
   <xs:enumeration value="DataClassificationPredicate"/>
  </xs:restriction>
 </xs:simpleType>
</xs:schema>
