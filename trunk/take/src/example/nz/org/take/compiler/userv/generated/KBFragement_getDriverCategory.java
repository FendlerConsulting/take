package example.nz.org.take.compiler.userv.generated;

import nz.org.take.rt.*;


/**
 * Class generated by the take compiler.
 * @version Fri Aug 17 22:09:06 NZST 2007
 */
@SuppressWarnings("unchecked")
class KBFragement_getDriverCategory {
    /**
     * Method generated for query /driverCategory[in,out]
     * @param driver input parameter generated from slot 0
     * @return an iterator for instances of YoungDriver
    */
    public static ResultSet<YoungDriver> getDriverCategory(
        final example.nz.org.take.compiler.userv.domainmodel.Driver driver) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<YoungDriver> _result = new ResultSet(KBFragement_getDriverCategory.getDriverCategory(
                    driver, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query /driverCategory[in,out]
     * @param driver input parameter generated from slot 0
     * @return an iterator for instances of YoungDriver
    */
    static ResourceIterator<YoungDriver> getDriverCategory(
        final example.nz.org.take.compiler.userv.domainmodel.Driver driver,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<YoungDriver> result = new IteratorChain<YoungDriver>(2) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    //  IF isMale(<driver>) AND less_than_ii(getAge(<driver>),25) THEN /driverCategory(<driver>,young driver)
                    case 0:
                        return getDriverCategory_0(driver,
                            _derivation.reset(_derivationlevel));

                    //  IF isMale(<driver>) AND less_than_ii(getAge(<driver>),20) THEN /driverCategory(<driver>,young driver)
                    case 1:
                        return getDriverCategory_1(driver,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    //  IF isMale(<driver>) AND less_than_ii(getAge(<driver>),25) THEN /driverCategory(<driver>,young driver)
                    case 0:
                        return "DE_DAC01";

                    //  IF isMale(<driver>) AND less_than_ii(getAge(<driver>),20) THEN /driverCategory(<driver>,young driver)
                    case 1:
                        return "DE_DAC02";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    }

    /**
     * Method generated for query /driverCategory[in,out]
     * @param driver input parameter generated from slot 0
     * @return an iterator for instances of YoungDriver
    */
    private static ResourceIterator<YoungDriver> getDriverCategory_0(
        final example.nz.org.take.compiler.userv.domainmodel.Driver driver,
        final DerivationController _derivation) {
        _derivation.log("DE_DAC01", DerivationController.RULE, driver,
            DerivationController.NIL);

        // Variable bindings in rule:  IF isMale(<driver>) AND less_than_ii(getAge(<driver>),25) THEN /driverCategory(<driver>,young driver)
        class bindingsInRule14 {
            // Property generated for term  "<driver>"
            example.nz.org.take.compiler.userv.domainmodel.Driver p1;

            // Property generated for term  "getAge(<driver>)"
            int p2;

            // Property generated for term  "25"
            java.lang.Integer p3;

            // Property generated for term  "young driver"
            java.lang.String p4;
        }
        ;

        final bindingsInRule14 bindings = new bindingsInRule14();
        bindings.p4 = "young driver";
        bindings.p3 = 25;
        bindings.p1 = driver;
        bindings.p2 = driver.getAge();

        // code for prereq isMale(<driver>)
        final ResourceIterator<_isMale> iterator1 = KBFragement_isMale_1.isMale_1(driver,
                _derivation.increaseDepth());

        // code for prereq less_than_ii(getAge(<driver>),25)
        final ResourceIterator<_less_than_ii> iterator2 = new NestedIterator<_isMale, _less_than_ii>(iterator1) {
                public ResourceIterator<_less_than_ii> getNextIterator(
                    _isMale object) {
                    bindings.p1 = object.slot1;

                    return KBFragement_less_than_ii_11.less_than_ii_11(bindings.p2,
                        bindings.p3, _derivation.increaseDepth());
                }
            };

        // code for prereq /driverCategory(<driver>,young driver)
        final ResourceIterator<YoungDriver> iterator3 = new NestedIterator<_less_than_ii, YoungDriver>(iterator2) {
                public ResourceIterator<YoungDriver> getNextIterator(
                    _less_than_ii object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = 25;

                    return new SingletonIterator(new YoungDriver(bindings.p1,
                            bindings.p4));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query /driverCategory[in,out]
     * @param driver input parameter generated from slot 0
     * @return an iterator for instances of YoungDriver
    */
    private static ResourceIterator<YoungDriver> getDriverCategory_1(
        final example.nz.org.take.compiler.userv.domainmodel.Driver driver,
        final DerivationController _derivation) {
        _derivation.log("DE_DAC02", DerivationController.RULE, driver,
            DerivationController.NIL);

        // Variable bindings in rule:  IF isMale(<driver>) AND less_than_ii(getAge(<driver>),20) THEN /driverCategory(<driver>,young driver)
        class bindingsInRule15 {
            // Property generated for term  "<driver>"
            example.nz.org.take.compiler.userv.domainmodel.Driver p1;

            // Property generated for term  "getAge(<driver>)"
            int p2;

            // Property generated for term  "20"
            java.lang.Integer p3;

            // Property generated for term  "young driver"
            java.lang.String p4;
        }
        ;

        final bindingsInRule15 bindings = new bindingsInRule15();
        bindings.p4 = "young driver";
        bindings.p3 = 20;
        bindings.p1 = driver;
        bindings.p2 = driver.getAge();

        // code for prereq isMale(<driver>)
        final ResourceIterator<_isMale> iterator1 = KBFragement_neg_isMale_1.neg_isMale_1(driver,
                _derivation.increaseDepth());

        // code for prereq less_than_ii(getAge(<driver>),20)
        final ResourceIterator<_less_than_ii> iterator2 = new NestedIterator<_isMale, _less_than_ii>(iterator1) {
                public ResourceIterator<_less_than_ii> getNextIterator(
                    _isMale object) {
                    bindings.p1 = object.slot1;

                    return KBFragement_less_than_ii_11.less_than_ii_11(bindings.p2,
                        bindings.p3, _derivation.increaseDepth());
                }
            };

        // code for prereq /driverCategory(<driver>,young driver)
        final ResourceIterator<YoungDriver> iterator3 = new NestedIterator<_less_than_ii, YoungDriver>(iterator2) {
                public ResourceIterator<YoungDriver> getNextIterator(
                    _less_than_ii object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = 20;

                    return new SingletonIterator(new YoungDriver(bindings.p1,
                            bindings.p4));
                }
            };

        return iterator3;
    }
}
