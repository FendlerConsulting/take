package test01.org.mandarax.compiler.prototype.generated;

import org.mandarax.compiler.rt.*;

import java.util.Iterator;


/**
 * Class generated by the mandarax compiler.
 * @version Thu Apr 05 12:49:42 NZST 2007
 */
@SuppressWarnings("unchecked")
public class _KB {
    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    public ResultSet<_is_father_of> is_father_of_10(final java.lang.String son) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_father_of> _result = new ResultSet(is_father_of_10(son,
                    _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private ResourceIterator<_is_father_of> is_father_of_10(
        final java.lang.String son, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_father_of> result = new IteratorChain<_is_father_of>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // is_father_of([Frank],[Lutz])
                    case 0:
                        return is_father_of_10_0(son,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Guenther],[Otto])
                    case 1:
                        return is_father_of_10_1(son,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Jens],[Klaus])
                    case 2:
                        return is_father_of_10_2(son,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Lutz],[Otto])
                    case 3:
                        return is_father_of_10_3(son,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Klaus],[Otto])
                    case 4:
                        return is_father_of_10_4(son,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Max],[Jens])
                    case 5:
                        return is_father_of_10_5(son,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Ralf],[Lutz])
                    case 6:
                        return is_father_of_10_6(son,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Werner],[Otto])
                    case 7:
                        return is_father_of_10_7(son,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // is_father_of([Frank],[Lutz])
                    case 0:
                        return "is_father_of([Frank],[Lutz])";

                    // is_father_of([Guenther],[Otto])
                    case 1:
                        return "is_father_of([Guenther],[Otto])";

                    // is_father_of([Jens],[Klaus])
                    case 2:
                        return "is_father_of([Jens],[Klaus])";

                    // is_father_of([Lutz],[Otto])
                    case 3:
                        return "is_father_of([Lutz],[Otto])";

                    // is_father_of([Klaus],[Otto])
                    case 4:
                        return "is_father_of([Klaus],[Otto])";

                    // is_father_of([Max],[Jens])
                    case 5:
                        return "is_father_of([Max],[Jens])";

                    // is_father_of([Ralf],[Lutz])
                    case 6:
                        return "is_father_of([Ralf],[Lutz])";

                    // is_father_of([Werner],[Otto])
                    case 7:
                        return "is_father_of([Werner],[Otto])";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_0(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Frank],[Lutz])");

        _is_father_of result = new _is_father_of();
        result.son = son;

        if (son.equals("Frank")) {
            result.father = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_1(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Guenther],[Otto])");

        _is_father_of result = new _is_father_of();
        result.son = son;

        if (son.equals("Guenther")) {
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_2(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Jens],[Klaus])");

        _is_father_of result = new _is_father_of();
        result.son = son;

        if (son.equals("Jens")) {
            result.father = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_3(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Lutz],[Otto])");

        _is_father_of result = new _is_father_of();
        result.son = son;

        if (son.equals("Lutz")) {
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_4(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Klaus],[Otto])");

        _is_father_of result = new _is_father_of();
        result.son = son;

        if (son.equals("Klaus")) {
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_5(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Max],[Jens])");

        _is_father_of result = new _is_father_of();
        result.son = son;

        if (son.equals("Max")) {
            result.father = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_6(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Ralf],[Lutz])");

        _is_father_of result = new _is_father_of();
        result.son = son;

        if (son.equals("Ralf")) {
            result.father = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_7(final java.lang.String son,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Werner],[Otto])");

        _is_father_of result = new _is_father_of();
        result.son = son;

        if (son.equals("Werner")) {
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_grandfather_of
     * @param grandchild input parameter generated from slot 0
     * @return an interator for instances of _is_grandfather_of
    */
    public ResultSet<_is_grandfather_of> is_grandfather_of_10(
        final java.lang.String grandchild) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_grandfather_of> _result = new ResultSet(is_grandfather_of_10(
                    grandchild, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query is_grandfather_of
     * @param grandchild input parameter generated from slot 0
     * @return an interator for instances of _is_grandfather_of
    */
    private ResourceIterator<_is_grandfather_of> is_grandfather_of_10(
        final java.lang.String grandchild,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_grandfather_of> result = new IteratorChain<_is_grandfather_of>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)
                    case 0:
                        return is_grandfather_of_10_0(grandchild,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)
                    case 0:
                        return "IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query is_grandfather_of
     * @param grandchild input parameter generated from slot 0
     * @return an interator for instances of _is_grandfather_of
    */
    private ResourceIterator<_is_grandfather_of> is_grandfather_of_10_0(
        final java.lang.String grandchild,
        final DerivationController _derivation) {
        _derivation.log(
            "IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)"); // Variable bindings in rule: IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)
        class bindingsInRule1 {
            // Property generated for var "<grandchild>" from is_father_of(<grandchild>,<father>)
            java.lang.String p1;

            // Property generated for var "<father>" from is_father_of(<grandchild>,<father>)
            java.lang.String p2;

            // Property generated for var "<grandfather>" from is_father_of(<father>,<grandfather>)
            java.lang.String p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = grandchild;

        // code for prereq is_father_of(<grandchild>,<father>)
        final ResourceIterator<_is_father_of> iterator1 = is_father_of_10(grandchild,
                _derivation.increaseDepth());

        // code for prereq is_father_of(<father>,<grandfather>)
        final ResourceIterator<_is_father_of> iterator2 = new NestedIterator<_is_father_of, _is_father_of>(iterator1) {
                public ResourceIterator<_is_father_of> getNextIterator(
                    _is_father_of object) {
                    bindings.p1 = object.son;
                    bindings.p2 = object.father;

                    return is_father_of_10(bindings.p2,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq is_grandfather_of(<grandchild>,<grandfather>)
        final ResourceIterator<_is_grandfather_of> iterator3 = new NestedIterator<_is_father_of, _is_grandfather_of>(iterator2) {
                public ResourceIterator<_is_grandfather_of> getNextIterator(
                    _is_father_of object) {
                    bindings.p2 = object.son;
                    bindings.p3 = object.father;

                    return new SingletonIterator(new _is_grandfather_of(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    public ResultSet<_is_father_of> is_father_of_01(
        final java.lang.String father) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_father_of> _result = new ResultSet(is_father_of_01(
                    father, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private ResourceIterator<_is_father_of> is_father_of_01(
        final java.lang.String father, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_father_of> result = new IteratorChain<_is_father_of>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // is_father_of([Frank],[Lutz])
                    case 0:
                        return is_father_of_01_0(father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Guenther],[Otto])
                    case 1:
                        return is_father_of_01_1(father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Jens],[Klaus])
                    case 2:
                        return is_father_of_01_2(father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Lutz],[Otto])
                    case 3:
                        return is_father_of_01_3(father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Klaus],[Otto])
                    case 4:
                        return is_father_of_01_4(father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Max],[Jens])
                    case 5:
                        return is_father_of_01_5(father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Ralf],[Lutz])
                    case 6:
                        return is_father_of_01_6(father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Werner],[Otto])
                    case 7:
                        return is_father_of_01_7(father,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // is_father_of([Frank],[Lutz])
                    case 0:
                        return "is_father_of([Frank],[Lutz])";

                    // is_father_of([Guenther],[Otto])
                    case 1:
                        return "is_father_of([Guenther],[Otto])";

                    // is_father_of([Jens],[Klaus])
                    case 2:
                        return "is_father_of([Jens],[Klaus])";

                    // is_father_of([Lutz],[Otto])
                    case 3:
                        return "is_father_of([Lutz],[Otto])";

                    // is_father_of([Klaus],[Otto])
                    case 4:
                        return "is_father_of([Klaus],[Otto])";

                    // is_father_of([Max],[Jens])
                    case 5:
                        return "is_father_of([Max],[Jens])";

                    // is_father_of([Ralf],[Lutz])
                    case 6:
                        return "is_father_of([Ralf],[Lutz])";

                    // is_father_of([Werner],[Otto])
                    case 7:
                        return "is_father_of([Werner],[Otto])";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_0(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Frank],[Lutz])");

        _is_father_of result = new _is_father_of();
        result.father = father;

        if (father.equals("Lutz")) {
            result.son = "Frank";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_1(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Guenther],[Otto])");

        _is_father_of result = new _is_father_of();
        result.father = father;

        if (father.equals("Otto")) {
            result.son = "Guenther";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_2(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Jens],[Klaus])");

        _is_father_of result = new _is_father_of();
        result.father = father;

        if (father.equals("Klaus")) {
            result.son = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_3(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Lutz],[Otto])");

        _is_father_of result = new _is_father_of();
        result.father = father;

        if (father.equals("Otto")) {
            result.son = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_4(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Klaus],[Otto])");

        _is_father_of result = new _is_father_of();
        result.father = father;

        if (father.equals("Otto")) {
            result.son = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_5(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Max],[Jens])");

        _is_father_of result = new _is_father_of();
        result.father = father;

        if (father.equals("Jens")) {
            result.son = "Max";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_6(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Ralf],[Lutz])");

        _is_father_of result = new _is_father_of();
        result.father = father;

        if (father.equals("Lutz")) {
            result.son = "Ralf";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_7(final java.lang.String father,
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Werner],[Otto])");

        _is_father_of result = new _is_father_of();
        result.father = father;

        if (father.equals("Otto")) {
            result.son = "Werner";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_grandfather_of
     * @param grandfather input parameter generated from slot 1
     * @return an interator for instances of _is_grandfather_of
    */
    public ResultSet<_is_grandfather_of> is_grandfather_of_01(
        final java.lang.String grandfather) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_grandfather_of> _result = new ResultSet(is_grandfather_of_01(
                    grandfather, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query is_grandfather_of
     * @param grandfather input parameter generated from slot 1
     * @return an interator for instances of _is_grandfather_of
    */
    private ResourceIterator<_is_grandfather_of> is_grandfather_of_01(
        final java.lang.String grandfather,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_grandfather_of> result = new IteratorChain<_is_grandfather_of>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)
                    case 0:
                        return is_grandfather_of_01_0(grandfather,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)
                    case 0:
                        return "IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query is_grandfather_of
     * @param grandfather input parameter generated from slot 1
     * @return an interator for instances of _is_grandfather_of
    */
    private ResourceIterator<_is_grandfather_of> is_grandfather_of_01_0(
        final java.lang.String grandfather,
        final DerivationController _derivation) {
        _derivation.log(
            "IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)"); // Variable bindings in rule: IF is_father_of(<grandchild>,<father>) AND is_father_of(<father>,<grandfather>) THEN is_grandfather_of(<grandchild>,<grandfather>)
        class bindingsInRule1 {
            // Property generated for var "<grandchild>" from is_father_of(<grandchild>,<father>)
            java.lang.String p1;

            // Property generated for var "<father>" from is_father_of(<grandchild>,<father>)
            java.lang.String p2;

            // Property generated for var "<grandfather>" from is_father_of(<father>,<grandfather>)
            java.lang.String p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p3 = grandfather;

        // code for prereq is_father_of(<grandchild>,<father>)
        final ResourceIterator<_is_father_of> iterator1 = is_father_of_00(_derivation.increaseDepth());

        // code for prereq is_father_of(<father>,<grandfather>)
        final ResourceIterator<_is_father_of> iterator2 = new NestedIterator<_is_father_of, _is_father_of>(iterator1) {
                public ResourceIterator<_is_father_of> getNextIterator(
                    _is_father_of object) {
                    bindings.p1 = object.son;
                    bindings.p2 = object.father;

                    return is_father_of_11(bindings.p2, bindings.p3,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq is_grandfather_of(<grandchild>,<grandfather>)
        final ResourceIterator<_is_grandfather_of> iterator3 = new NestedIterator<_is_father_of, _is_grandfather_of>(iterator2) {
                public ResourceIterator<_is_grandfather_of> getNextIterator(
                    _is_father_of object) {
                    bindings.p2 = object.son;
                    bindings.p3 = object.father;

                    return new SingletonIterator(new _is_grandfather_of(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query is_oncle_of
     * @param oncle input parameter generated from slot 1
     * @return an interator for instances of _is_oncle_of
    */
    public ResultSet<_is_oncle_of> is_oncle_of_01(final java.lang.String oncle) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_oncle_of> _result = new ResultSet(is_oncle_of_01(oncle,
                    _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query is_oncle_of
     * @param oncle input parameter generated from slot 1
     * @return an interator for instances of _is_oncle_of
    */
    private ResourceIterator<_is_oncle_of> is_oncle_of_01(
        final java.lang.String oncle, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_oncle_of> result = new IteratorChain<_is_oncle_of>(0) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    public ResultSet<_is_father_of> is_father_of_00() {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_father_of> _result = new ResultSet(is_father_of_00(_derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    private ResourceIterator<_is_father_of> is_father_of_00(
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_father_of> result = new IteratorChain<_is_father_of>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // is_father_of([Frank],[Lutz])
                    case 0:
                        return is_father_of_00_0(_derivation.reset(
                                _derivationlevel));

                    // is_father_of([Guenther],[Otto])
                    case 1:
                        return is_father_of_00_1(_derivation.reset(
                                _derivationlevel));

                    // is_father_of([Jens],[Klaus])
                    case 2:
                        return is_father_of_00_2(_derivation.reset(
                                _derivationlevel));

                    // is_father_of([Lutz],[Otto])
                    case 3:
                        return is_father_of_00_3(_derivation.reset(
                                _derivationlevel));

                    // is_father_of([Klaus],[Otto])
                    case 4:
                        return is_father_of_00_4(_derivation.reset(
                                _derivationlevel));

                    // is_father_of([Max],[Jens])
                    case 5:
                        return is_father_of_00_5(_derivation.reset(
                                _derivationlevel));

                    // is_father_of([Ralf],[Lutz])
                    case 6:
                        return is_father_of_00_6(_derivation.reset(
                                _derivationlevel));

                    // is_father_of([Werner],[Otto])
                    case 7:
                        return is_father_of_00_7(_derivation.reset(
                                _derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // is_father_of([Frank],[Lutz])
                    case 0:
                        return "is_father_of([Frank],[Lutz])";

                    // is_father_of([Guenther],[Otto])
                    case 1:
                        return "is_father_of([Guenther],[Otto])";

                    // is_father_of([Jens],[Klaus])
                    case 2:
                        return "is_father_of([Jens],[Klaus])";

                    // is_father_of([Lutz],[Otto])
                    case 3:
                        return "is_father_of([Lutz],[Otto])";

                    // is_father_of([Klaus],[Otto])
                    case 4:
                        return "is_father_of([Klaus],[Otto])";

                    // is_father_of([Max],[Jens])
                    case 5:
                        return "is_father_of([Max],[Jens])";

                    // is_father_of([Ralf],[Lutz])
                    case 6:
                        return "is_father_of([Ralf],[Lutz])";

                    // is_father_of([Werner],[Otto])
                    case 7:
                        return "is_father_of([Werner],[Otto])";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_0(
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Frank],[Lutz])");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.son = "Frank";
            result.father = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_1(
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Guenther],[Otto])");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.son = "Guenther";
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_2(
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Jens],[Klaus])");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.son = "Jens";
            result.father = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_3(
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Lutz],[Otto])");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.son = "Lutz";
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_4(
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Klaus],[Otto])");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.son = "Klaus";
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_5(
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Max],[Jens])");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.son = "Max";
            result.father = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_6(
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Ralf],[Lutz])");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.son = "Ralf";
            result.father = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_7(
        final DerivationController _derivation) {
        _derivation.log("is_father_of([Werner],[Otto])");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.son = "Werner";
            result.father = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    public ResultSet<_is_father_of> is_father_of_11(
        final java.lang.String son, final java.lang.String father) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_father_of> _result = new ResultSet(is_father_of_11(son,
                    father, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private ResourceIterator<_is_father_of> is_father_of_11(
        final java.lang.String son, final java.lang.String father,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_father_of> result = new IteratorChain<_is_father_of>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // is_father_of([Frank],[Lutz])
                    case 0:
                        return is_father_of_11_0(son, father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Guenther],[Otto])
                    case 1:
                        return is_father_of_11_1(son, father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Jens],[Klaus])
                    case 2:
                        return is_father_of_11_2(son, father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Lutz],[Otto])
                    case 3:
                        return is_father_of_11_3(son, father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Klaus],[Otto])
                    case 4:
                        return is_father_of_11_4(son, father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Max],[Jens])
                    case 5:
                        return is_father_of_11_5(son, father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Ralf],[Lutz])
                    case 6:
                        return is_father_of_11_6(son, father,
                            _derivation.reset(_derivationlevel));

                    // is_father_of([Werner],[Otto])
                    case 7:
                        return is_father_of_11_7(son, father,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // is_father_of([Frank],[Lutz])
                    case 0:
                        return "is_father_of([Frank],[Lutz])";

                    // is_father_of([Guenther],[Otto])
                    case 1:
                        return "is_father_of([Guenther],[Otto])";

                    // is_father_of([Jens],[Klaus])
                    case 2:
                        return "is_father_of([Jens],[Klaus])";

                    // is_father_of([Lutz],[Otto])
                    case 3:
                        return "is_father_of([Lutz],[Otto])";

                    // is_father_of([Klaus],[Otto])
                    case 4:
                        return "is_father_of([Klaus],[Otto])";

                    // is_father_of([Max],[Jens])
                    case 5:
                        return "is_father_of([Max],[Jens])";

                    // is_father_of([Ralf],[Lutz])
                    case 6:
                        return "is_father_of([Ralf],[Lutz])";

                    // is_father_of([Werner],[Otto])
                    case 7:
                        return "is_father_of([Werner],[Otto])";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_0(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("is_father_of([Frank],[Lutz])");

        _is_father_of result = new _is_father_of();
        result.son = son;
        result.father = father;

        if (son.equals("Frank") && father.equals("Lutz")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_1(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("is_father_of([Guenther],[Otto])");

        _is_father_of result = new _is_father_of();
        result.son = son;
        result.father = father;

        if (son.equals("Guenther") && father.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_2(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("is_father_of([Jens],[Klaus])");

        _is_father_of result = new _is_father_of();
        result.son = son;
        result.father = father;

        if (son.equals("Jens") && father.equals("Klaus")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_3(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("is_father_of([Lutz],[Otto])");

        _is_father_of result = new _is_father_of();
        result.son = son;
        result.father = father;

        if (son.equals("Lutz") && father.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_4(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("is_father_of([Klaus],[Otto])");

        _is_father_of result = new _is_father_of();
        result.son = son;
        result.father = father;

        if (son.equals("Klaus") && father.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_5(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("is_father_of([Max],[Jens])");

        _is_father_of result = new _is_father_of();
        result.son = son;
        result.father = father;

        if (son.equals("Max") && father.equals("Jens")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_6(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("is_father_of([Ralf],[Lutz])");

        _is_father_of result = new _is_father_of();
        result.son = son;
        result.father = father;

        if (son.equals("Ralf") && father.equals("Lutz")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query is_father_of
     * @param son input parameter generated from slot 0
     * @param father input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_7(final java.lang.String son,
        final java.lang.String father, final DerivationController _derivation) {
        _derivation.log("is_father_of([Werner],[Otto])");

        _is_father_of result = new _is_father_of();
        result.son = son;
        result.father = father;

        if (son.equals("Werner") && father.equals("Otto")) {
            return result;
        }

        return null;
    }
}
