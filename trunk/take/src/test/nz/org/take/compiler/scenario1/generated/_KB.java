package test.nz.org.take.compiler.scenario1.generated;

import nz.org.take.rt.*;

import java.util.Iterator;


/**
 * Class generated by the take compiler.
 * @version Fri Apr 27 16:43:47 NZST 2007
 */
@SuppressWarnings("unchecked")
public class _KB {
    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> getFather(final java.lang.String slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(getFather(slot1,
                    _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> getFather(
        final java.lang.String slot1, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@a01335
                    case 0:
                        return getFather_0(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@14d3343
                    case 1:
                        return getFather_1(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1608e05
                    case 2:
                        return getFather_2(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@bf32c
                    case 3:
                        return getFather_3(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@89fbe3
                    case 4:
                        return getFather_4(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@f81843
                    case 5:
                        return getFather_5(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@dd5b
                    case 6:
                        return getFather_6(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@c4bcdc
                    case 7:
                        return getFather_7(slot1,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@a01335
                    case 0:
                        return "nz.org.take.Fact@a01335";

                    // nz.org.take.Fact@14d3343
                    case 1:
                        return "nz.org.take.Fact@14d3343";

                    // nz.org.take.Fact@1608e05
                    case 2:
                        return "nz.org.take.Fact@1608e05";

                    // nz.org.take.Fact@bf32c
                    case 3:
                        return "nz.org.take.Fact@bf32c";

                    // nz.org.take.Fact@89fbe3
                    case 4:
                        return "nz.org.take.Fact@89fbe3";

                    // nz.org.take.Fact@f81843
                    case 5:
                        return "nz.org.take.Fact@f81843";

                    // nz.org.take.Fact@dd5b
                    case 6:
                        return "nz.org.take.Fact@dd5b";

                    // nz.org.take.Fact@c4bcdc
                    case 7:
                        return "nz.org.take.Fact@c4bcdc";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getFather_0(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@a01335");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;

        if (slot1.equals("Frank")) {
            result.slot2 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getFather_1(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@14d3343");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;

        if (slot1.equals("Guenther")) {
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getFather_2(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1608e05");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;

        if (slot1.equals("Jens")) {
            result.slot2 = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getFather_3(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@bf32c");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;

        if (slot1.equals("Lutz")) {
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getFather_4(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@89fbe3");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;

        if (slot1.equals("Klaus")) {
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getFather_5(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@f81843");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;

        if (slot1.equals("Max")) {
            result.slot2 = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getFather_6(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@dd5b");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;

        if (slot1.equals("Ralf")) {
            result.slot2 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getFather_7(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@c4bcdc");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;

        if (slot1.equals("Werner")) {
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> getSon(final java.lang.String slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(getSon(slot2, _derivation),
                _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> getSon(final java.lang.String slot2,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@a01335
                    case 0:
                        return getSon_0(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@14d3343
                    case 1:
                        return getSon_1(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1608e05
                    case 2:
                        return getSon_2(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@bf32c
                    case 3:
                        return getSon_3(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@89fbe3
                    case 4:
                        return getSon_4(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@f81843
                    case 5:
                        return getSon_5(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@dd5b
                    case 6:
                        return getSon_6(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@c4bcdc
                    case 7:
                        return getSon_7(slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@a01335
                    case 0:
                        return "nz.org.take.Fact@a01335";

                    // nz.org.take.Fact@14d3343
                    case 1:
                        return "nz.org.take.Fact@14d3343";

                    // nz.org.take.Fact@1608e05
                    case 2:
                        return "nz.org.take.Fact@1608e05";

                    // nz.org.take.Fact@bf32c
                    case 3:
                        return "nz.org.take.Fact@bf32c";

                    // nz.org.take.Fact@89fbe3
                    case 4:
                        return "nz.org.take.Fact@89fbe3";

                    // nz.org.take.Fact@f81843
                    case 5:
                        return "nz.org.take.Fact@f81843";

                    // nz.org.take.Fact@dd5b
                    case 6:
                        return "nz.org.take.Fact@dd5b";

                    // nz.org.take.Fact@c4bcdc
                    case 7:
                        return "nz.org.take.Fact@c4bcdc";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_0(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@a01335");

        IsFatherOf result = new IsFatherOf();
        result.slot2 = slot2;

        if (slot2.equals("Lutz")) {
            result.slot1 = "Frank";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_1(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@14d3343");

        IsFatherOf result = new IsFatherOf();
        result.slot2 = slot2;

        if (slot2.equals("Otto")) {
            result.slot1 = "Guenther";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_2(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1608e05");

        IsFatherOf result = new IsFatherOf();
        result.slot2 = slot2;

        if (slot2.equals("Klaus")) {
            result.slot1 = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_3(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@bf32c");

        IsFatherOf result = new IsFatherOf();
        result.slot2 = slot2;

        if (slot2.equals("Otto")) {
            result.slot1 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_4(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@89fbe3");

        IsFatherOf result = new IsFatherOf();
        result.slot2 = slot2;

        if (slot2.equals("Otto")) {
            result.slot1 = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_5(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@f81843");

        IsFatherOf result = new IsFatherOf();
        result.slot2 = slot2;

        if (slot2.equals("Jens")) {
            result.slot1 = "Max";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_6(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@dd5b");

        IsFatherOf result = new IsFatherOf();
        result.slot2 = slot2;

        if (slot2.equals("Lutz")) {
            result.slot1 = "Ralf";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_7(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@c4bcdc");

        IsFatherOf result = new IsFatherOf();
        result.slot2 = slot2;

        if (slot2.equals("Otto")) {
            result.slot1 = "Werner";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@f8e2053f
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsGrandfatherOf
    */
    public ResultSet<IsGrandfatherOf> getGrandfather(
        final java.lang.String slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsGrandfatherOf> _result = new ResultSet(getGrandfather(
                    slot1, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@f8e2053f
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandfather(
        final java.lang.String slot1, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsGrandfatherOf> result = new IteratorChain<IsGrandfatherOf>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@b4d3d5
                    case 0:
                        return getGrandfather_0(slot1,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@b4d3d5
                    case 0:
                        return "nz.org.take.DerivationRule@b4d3d5";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@f8e2053f
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandfather_0(
        final java.lang.String slot1, final DerivationController _derivation) {
        _derivation.log("nz.org.take.DerivationRule@b4d3d5"); // Variable bindings in rule: nz.org.take.DerivationRule@b4d3d5
        class bindingsInRule1 {
            // Property generated for var "nz.org.take.Variable@1bf52a5" from nz.org.take.Prerequisite@1cafa9e
            java.lang.String p1;

            // Property generated for var "nz.org.take.Variable@10b9d04" from nz.org.take.Prerequisite@1cafa9e
            java.lang.String p2;

            // Property generated for var "nz.org.take.Variable@171732b" from nz.org.take.Prerequisite@1404536
            java.lang.String p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = slot1;

        // code for prereq nz.org.take.Prerequisite@1cafa9e
        final ResourceIterator<IsFatherOf> iterator1 = getSon(slot1,
                _derivation.increaseDepth());

        // code for prereq nz.org.take.Prerequisite@1404536
        final ResourceIterator<IsFatherOf> iterator2 = new NestedIterator<IsFatherOf, IsFatherOf>(iterator1) {
                public ResourceIterator<IsFatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return getSon(bindings.p2, _derivation.increaseDepth());
                }
            };

        // code for prereq nz.org.take.Fact@7d8483
        final ResourceIterator<IsGrandfatherOf> iterator3 = new NestedIterator<IsFatherOf, IsGrandfatherOf>(iterator2) {
                public ResourceIterator<IsGrandfatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = object.slot2;

                    return new SingletonIterator(new IsGrandfatherOf(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@f8e2053f
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsGrandfatherOf
    */
    public ResultSet<IsGrandfatherOf> getGrandchildren(
        final java.lang.String slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsGrandfatherOf> _result = new ResultSet(getGrandchildren(
                    slot2, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@f8e2053f
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandchildren(
        final java.lang.String slot2, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsGrandfatherOf> result = new IteratorChain<IsGrandfatherOf>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@b4d3d5
                    case 0:
                        return getGrandchildren_0(slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@b4d3d5
                    case 0:
                        return "nz.org.take.DerivationRule@b4d3d5";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@f8e2053f
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsGrandfatherOf
    */
    private ResourceIterator<IsGrandfatherOf> getGrandchildren_0(
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.DerivationRule@b4d3d5"); // Variable bindings in rule: nz.org.take.DerivationRule@b4d3d5
        class bindingsInRule1 {
            // Property generated for var "nz.org.take.Variable@1bf52a5" from nz.org.take.Prerequisite@1cafa9e
            java.lang.String p1;

            // Property generated for var "nz.org.take.Variable@10b9d04" from nz.org.take.Prerequisite@1cafa9e
            java.lang.String p2;

            // Property generated for var "nz.org.take.Variable@171732b" from nz.org.take.Prerequisite@1404536
            java.lang.String p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p3 = slot2;

        // code for prereq nz.org.take.Prerequisite@1cafa9e
        final ResourceIterator<IsFatherOf> iterator1 = getSon(_derivation.increaseDepth());

        // code for prereq nz.org.take.Prerequisite@1404536
        final ResourceIterator<IsFatherOf> iterator2 = new NestedIterator<IsFatherOf, IsFatherOf>(iterator1) {
                public ResourceIterator<IsFatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return getSon(bindings.p2, bindings.p3,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq nz.org.take.Fact@7d8483
        final ResourceIterator<IsGrandfatherOf> iterator3 = new NestedIterator<IsFatherOf, IsGrandfatherOf>(iterator2) {
                public ResourceIterator<IsGrandfatherOf> getNextIterator(
                    IsFatherOf object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = object.slot2;

                    return new SingletonIterator(new IsGrandfatherOf(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> getSon() {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(getSon(_derivation),
                _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> getSon(
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@a01335
                    case 0:
                        return getSon_0(_derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@14d3343
                    case 1:
                        return getSon_1(_derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1608e05
                    case 2:
                        return getSon_2(_derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@bf32c
                    case 3:
                        return getSon_3(_derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@89fbe3
                    case 4:
                        return getSon_4(_derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@f81843
                    case 5:
                        return getSon_5(_derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@dd5b
                    case 6:
                        return getSon_6(_derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@c4bcdc
                    case 7:
                        return getSon_7(_derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@a01335
                    case 0:
                        return "nz.org.take.Fact@a01335";

                    // nz.org.take.Fact@14d3343
                    case 1:
                        return "nz.org.take.Fact@14d3343";

                    // nz.org.take.Fact@1608e05
                    case 2:
                        return "nz.org.take.Fact@1608e05";

                    // nz.org.take.Fact@bf32c
                    case 3:
                        return "nz.org.take.Fact@bf32c";

                    // nz.org.take.Fact@89fbe3
                    case 4:
                        return "nz.org.take.Fact@89fbe3";

                    // nz.org.take.Fact@f81843
                    case 5:
                        return "nz.org.take.Fact@f81843";

                    // nz.org.take.Fact@dd5b
                    case 6:
                        return "nz.org.take.Fact@dd5b";

                    // nz.org.take.Fact@c4bcdc
                    case 7:
                        return "nz.org.take.Fact@c4bcdc";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_0(final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@a01335");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.slot1 = "Frank";
            result.slot2 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_1(final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@14d3343");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.slot1 = "Guenther";
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_2(final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1608e05");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.slot1 = "Jens";
            result.slot2 = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_3(final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@bf32c");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.slot1 = "Lutz";
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_4(final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@89fbe3");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.slot1 = "Klaus";
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_5(final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@f81843");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.slot1 = "Max";
            result.slot2 = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_6(final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@dd5b");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.slot1 = "Ralf";
            result.slot2 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_7(final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@c4bcdc");

        IsFatherOf result = new IsFatherOf();

        if (true) {
            result.slot1 = "Werner";
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    public ResultSet<IsFatherOf> getSon(final java.lang.String slot1,
        final java.lang.String slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsFatherOf> _result = new ResultSet(getSon(slot1, slot2,
                    _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private ResourceIterator<IsFatherOf> getSon(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsFatherOf> result = new IteratorChain<IsFatherOf>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@a01335
                    case 0:
                        return getSon_0(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@14d3343
                    case 1:
                        return getSon_1(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1608e05
                    case 2:
                        return getSon_2(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@bf32c
                    case 3:
                        return getSon_3(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@89fbe3
                    case 4:
                        return getSon_4(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@f81843
                    case 5:
                        return getSon_5(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@dd5b
                    case 6:
                        return getSon_6(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@c4bcdc
                    case 7:
                        return getSon_7(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@a01335
                    case 0:
                        return "nz.org.take.Fact@a01335";

                    // nz.org.take.Fact@14d3343
                    case 1:
                        return "nz.org.take.Fact@14d3343";

                    // nz.org.take.Fact@1608e05
                    case 2:
                        return "nz.org.take.Fact@1608e05";

                    // nz.org.take.Fact@bf32c
                    case 3:
                        return "nz.org.take.Fact@bf32c";

                    // nz.org.take.Fact@89fbe3
                    case 4:
                        return "nz.org.take.Fact@89fbe3";

                    // nz.org.take.Fact@f81843
                    case 5:
                        return "nz.org.take.Fact@f81843";

                    // nz.org.take.Fact@dd5b
                    case 6:
                        return "nz.org.take.Fact@dd5b";

                    // nz.org.take.Fact@c4bcdc
                    case 7:
                        return "nz.org.take.Fact@c4bcdc";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_0(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@a01335");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Frank") && slot2.equals("Lutz")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_1(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@14d3343");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Guenther") && slot2.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_2(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1608e05");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Jens") && slot2.equals("Klaus")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_3(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@bf32c");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Lutz") && slot2.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_4(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@89fbe3");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Klaus") && slot2.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_5(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@f81843");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Max") && slot2.equals("Jens")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_6(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@dd5b");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Ralf") && slot2.equals("Lutz")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@5da99e7d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of IsFatherOf
    */
    private IsFatherOf getSon_7(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@c4bcdc");

        IsFatherOf result = new IsFatherOf();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Werner") && slot2.equals("Otto")) {
            return result;
        }

        return null;
    }
}
