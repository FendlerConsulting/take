package test.nz.org.take.compiler.scenario1.generated;

import nz.org.take.rt.*;

import java.util.Iterator;


/**
 * Class generated by the take compiler.
 * @version Wed Apr 25 22:00:08 NZST 2007
 */
@SuppressWarnings("unchecked")
public class _KB {
    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    public ResultSet<_is_father_of> is_father_of_10(
        final java.lang.String slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_father_of> _result = new ResultSet(is_father_of_10(
                    slot1, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private ResourceIterator<_is_father_of> is_father_of_10(
        final java.lang.String slot1, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_father_of> result = new IteratorChain<_is_father_of>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@503429
                    case 0:
                        return is_father_of_10_0(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1908ca1
                    case 1:
                        return is_father_of_10_1(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@50d89c
                    case 2:
                        return is_father_of_10_2(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1bd0dd4
                    case 3:
                        return is_father_of_10_3(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@d70d7a
                    case 4:
                        return is_father_of_10_4(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@b5f53a
                    case 5:
                        return is_father_of_10_5(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1f6f0bf
                    case 6:
                        return is_father_of_10_6(slot1,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@137c60d
                    case 7:
                        return is_father_of_10_7(slot1,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@503429
                    case 0:
                        return "nz.org.take.Fact@503429";

                    // nz.org.take.Fact@1908ca1
                    case 1:
                        return "nz.org.take.Fact@1908ca1";

                    // nz.org.take.Fact@50d89c
                    case 2:
                        return "nz.org.take.Fact@50d89c";

                    // nz.org.take.Fact@1bd0dd4
                    case 3:
                        return "nz.org.take.Fact@1bd0dd4";

                    // nz.org.take.Fact@d70d7a
                    case 4:
                        return "nz.org.take.Fact@d70d7a";

                    // nz.org.take.Fact@b5f53a
                    case 5:
                        return "nz.org.take.Fact@b5f53a";

                    // nz.org.take.Fact@1f6f0bf
                    case 6:
                        return "nz.org.take.Fact@1f6f0bf";

                    // nz.org.take.Fact@137c60d
                    case 7:
                        return "nz.org.take.Fact@137c60d";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_0(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@503429");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;

        if (slot1.equals("Frank")) {
            result.slot2 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_1(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1908ca1");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;

        if (slot1.equals("Guenther")) {
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_2(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@50d89c");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;

        if (slot1.equals("Jens")) {
            result.slot2 = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_3(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1bd0dd4");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;

        if (slot1.equals("Lutz")) {
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_4(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@d70d7a");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;

        if (slot1.equals("Klaus")) {
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_5(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@b5f53a");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;

        if (slot1.equals("Max")) {
            result.slot2 = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_6(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1f6f0bf");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;

        if (slot1.equals("Ralf")) {
            result.slot2 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_10_7(final java.lang.String slot1,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@137c60d");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;

        if (slot1.equals("Werner")) {
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    public ResultSet<_is_father_of> is_father_of_01(
        final java.lang.String slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_father_of> _result = new ResultSet(is_father_of_01(
                    slot2, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private ResourceIterator<_is_father_of> is_father_of_01(
        final java.lang.String slot2, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_father_of> result = new IteratorChain<_is_father_of>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@503429
                    case 0:
                        return is_father_of_01_0(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1908ca1
                    case 1:
                        return is_father_of_01_1(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@50d89c
                    case 2:
                        return is_father_of_01_2(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1bd0dd4
                    case 3:
                        return is_father_of_01_3(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@d70d7a
                    case 4:
                        return is_father_of_01_4(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@b5f53a
                    case 5:
                        return is_father_of_01_5(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1f6f0bf
                    case 6:
                        return is_father_of_01_6(slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@137c60d
                    case 7:
                        return is_father_of_01_7(slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@503429
                    case 0:
                        return "nz.org.take.Fact@503429";

                    // nz.org.take.Fact@1908ca1
                    case 1:
                        return "nz.org.take.Fact@1908ca1";

                    // nz.org.take.Fact@50d89c
                    case 2:
                        return "nz.org.take.Fact@50d89c";

                    // nz.org.take.Fact@1bd0dd4
                    case 3:
                        return "nz.org.take.Fact@1bd0dd4";

                    // nz.org.take.Fact@d70d7a
                    case 4:
                        return "nz.org.take.Fact@d70d7a";

                    // nz.org.take.Fact@b5f53a
                    case 5:
                        return "nz.org.take.Fact@b5f53a";

                    // nz.org.take.Fact@1f6f0bf
                    case 6:
                        return "nz.org.take.Fact@1f6f0bf";

                    // nz.org.take.Fact@137c60d
                    case 7:
                        return "nz.org.take.Fact@137c60d";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_0(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@503429");

        _is_father_of result = new _is_father_of();
        result.slot2 = slot2;

        if (slot2.equals("Lutz")) {
            result.slot1 = "Frank";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_1(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1908ca1");

        _is_father_of result = new _is_father_of();
        result.slot2 = slot2;

        if (slot2.equals("Otto")) {
            result.slot1 = "Guenther";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_2(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@50d89c");

        _is_father_of result = new _is_father_of();
        result.slot2 = slot2;

        if (slot2.equals("Klaus")) {
            result.slot1 = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_3(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1bd0dd4");

        _is_father_of result = new _is_father_of();
        result.slot2 = slot2;

        if (slot2.equals("Otto")) {
            result.slot1 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_4(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@d70d7a");

        _is_father_of result = new _is_father_of();
        result.slot2 = slot2;

        if (slot2.equals("Otto")) {
            result.slot1 = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_5(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@b5f53a");

        _is_father_of result = new _is_father_of();
        result.slot2 = slot2;

        if (slot2.equals("Jens")) {
            result.slot1 = "Max";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_6(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1f6f0bf");

        _is_father_of result = new _is_father_of();
        result.slot2 = slot2;

        if (slot2.equals("Lutz")) {
            result.slot1 = "Ralf";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_01_7(final java.lang.String slot2,
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@137c60d");

        _is_father_of result = new _is_father_of();
        result.slot2 = slot2;

        if (slot2.equals("Otto")) {
            result.slot1 = "Werner";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@2394ca3f
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_grandfather_of
    */
    public ResultSet<_is_grandfather_of> is_grandfather_of_10(
        final java.lang.String slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_grandfather_of> _result = new ResultSet(is_grandfather_of_10(
                    slot1, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@2394ca3f
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_grandfather_of
    */
    private ResourceIterator<_is_grandfather_of> is_grandfather_of_10(
        final java.lang.String slot1, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_grandfather_of> result = new IteratorChain<_is_grandfather_of>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@df8f5e
                    case 0:
                        return is_grandfather_of_10_0(slot1,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@df8f5e
                    case 0:
                        return "nz.org.take.DerivationRule@df8f5e";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@2394ca3f
     * @param slot1 input parameter generated from slot 0
     * @return an interator for instances of _is_grandfather_of
    */
    private ResourceIterator<_is_grandfather_of> is_grandfather_of_10_0(
        final java.lang.String slot1, final DerivationController _derivation) {
        _derivation.log("nz.org.take.DerivationRule@df8f5e"); // Variable bindings in rule: nz.org.take.DerivationRule@df8f5e
        class bindingsInRule1 {
            // Property generated for var "nz.org.take.Variable@13d93f4" from nz.org.take.Prerequisite@1bca5f1
            java.lang.String p1;

            // Property generated for var "nz.org.take.Variable@329f3d" from nz.org.take.Prerequisite@1bca5f1
            java.lang.String p2;

            // Property generated for var "nz.org.take.Variable@1749757" from nz.org.take.Prerequisite@17bd6a1
            java.lang.String p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = slot1;

        // code for prereq nz.org.take.Prerequisite@1bca5f1
        final ResourceIterator<_is_father_of> iterator1 = is_father_of_10(slot1,
                _derivation.increaseDepth());

        // code for prereq nz.org.take.Prerequisite@17bd6a1
        final ResourceIterator<_is_father_of> iterator2 = new NestedIterator<_is_father_of, _is_father_of>(iterator1) {
                public ResourceIterator<_is_father_of> getNextIterator(
                    _is_father_of object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return is_father_of_10(bindings.p2,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq nz.org.take.Fact@18ee9d6
        final ResourceIterator<_is_grandfather_of> iterator3 = new NestedIterator<_is_father_of, _is_grandfather_of>(iterator2) {
                public ResourceIterator<_is_grandfather_of> getNextIterator(
                    _is_father_of object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = object.slot2;

                    return new SingletonIterator(new _is_grandfather_of(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@2394ca3f
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_grandfather_of
    */
    public ResultSet<_is_grandfather_of> is_grandfather_of_01(
        final java.lang.String slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_grandfather_of> _result = new ResultSet(is_grandfather_of_01(
                    slot2, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@2394ca3f
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_grandfather_of
    */
    private ResourceIterator<_is_grandfather_of> is_grandfather_of_01(
        final java.lang.String slot2, final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_grandfather_of> result = new IteratorChain<_is_grandfather_of>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@df8f5e
                    case 0:
                        return is_grandfather_of_01_0(slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@df8f5e
                    case 0:
                        return "nz.org.take.DerivationRule@df8f5e";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@2394ca3f
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_grandfather_of
    */
    private ResourceIterator<_is_grandfather_of> is_grandfather_of_01_0(
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.DerivationRule@df8f5e"); // Variable bindings in rule: nz.org.take.DerivationRule@df8f5e
        class bindingsInRule1 {
            // Property generated for var "nz.org.take.Variable@13d93f4" from nz.org.take.Prerequisite@1bca5f1
            java.lang.String p1;

            // Property generated for var "nz.org.take.Variable@329f3d" from nz.org.take.Prerequisite@1bca5f1
            java.lang.String p2;

            // Property generated for var "nz.org.take.Variable@1749757" from nz.org.take.Prerequisite@17bd6a1
            java.lang.String p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p3 = slot2;

        // code for prereq nz.org.take.Prerequisite@1bca5f1
        final ResourceIterator<_is_father_of> iterator1 = is_father_of_00(_derivation.increaseDepth());

        // code for prereq nz.org.take.Prerequisite@17bd6a1
        final ResourceIterator<_is_father_of> iterator2 = new NestedIterator<_is_father_of, _is_father_of>(iterator1) {
                public ResourceIterator<_is_father_of> getNextIterator(
                    _is_father_of object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return is_father_of_11(bindings.p2, bindings.p3,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq nz.org.take.Fact@18ee9d6
        final ResourceIterator<_is_grandfather_of> iterator3 = new NestedIterator<_is_father_of, _is_grandfather_of>(iterator2) {
                public ResourceIterator<_is_grandfather_of> getNextIterator(
                    _is_father_of object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = object.slot2;

                    return new SingletonIterator(new _is_grandfather_of(
                            bindings.p1, bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    public ResultSet<_is_father_of> is_father_of_00() {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_father_of> _result = new ResultSet(is_father_of_00(
                    _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    private ResourceIterator<_is_father_of> is_father_of_00(
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_father_of> result = new IteratorChain<_is_father_of>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@503429
                    case 0:
                        return is_father_of_00_0(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@1908ca1
                    case 1:
                        return is_father_of_00_1(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@50d89c
                    case 2:
                        return is_father_of_00_2(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@1bd0dd4
                    case 3:
                        return is_father_of_00_3(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@d70d7a
                    case 4:
                        return is_father_of_00_4(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@b5f53a
                    case 5:
                        return is_father_of_00_5(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@1f6f0bf
                    case 6:
                        return is_father_of_00_6(_derivation.reset(
                                _derivationlevel));

                    // nz.org.take.Fact@137c60d
                    case 7:
                        return is_father_of_00_7(_derivation.reset(
                                _derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@503429
                    case 0:
                        return "nz.org.take.Fact@503429";

                    // nz.org.take.Fact@1908ca1
                    case 1:
                        return "nz.org.take.Fact@1908ca1";

                    // nz.org.take.Fact@50d89c
                    case 2:
                        return "nz.org.take.Fact@50d89c";

                    // nz.org.take.Fact@1bd0dd4
                    case 3:
                        return "nz.org.take.Fact@1bd0dd4";

                    // nz.org.take.Fact@d70d7a
                    case 4:
                        return "nz.org.take.Fact@d70d7a";

                    // nz.org.take.Fact@b5f53a
                    case 5:
                        return "nz.org.take.Fact@b5f53a";

                    // nz.org.take.Fact@1f6f0bf
                    case 6:
                        return "nz.org.take.Fact@1f6f0bf";

                    // nz.org.take.Fact@137c60d
                    case 7:
                        return "nz.org.take.Fact@137c60d";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_0(
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@503429");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.slot1 = "Frank";
            result.slot2 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_1(
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1908ca1");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.slot1 = "Guenther";
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_2(
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@50d89c");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.slot1 = "Jens";
            result.slot2 = "Klaus";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_3(
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1bd0dd4");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.slot1 = "Lutz";
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_4(
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@d70d7a");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.slot1 = "Klaus";
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_5(
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@b5f53a");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.slot1 = "Max";
            result.slot2 = "Jens";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_6(
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1f6f0bf");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.slot1 = "Ralf";
            result.slot2 = "Lutz";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_00_7(
        final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@137c60d");

        _is_father_of result = new _is_father_of();

        if (true) {
            result.slot1 = "Werner";
            result.slot2 = "Otto";

            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    public ResultSet<_is_father_of> is_father_of_11(
        final java.lang.String slot1, final java.lang.String slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_is_father_of> _result = new ResultSet(is_father_of_11(
                    slot1, slot2, _derivation), _derivation);

        return _result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private ResourceIterator<_is_father_of> is_father_of_11(
        final java.lang.String slot1, final java.lang.String slot2,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<_is_father_of> result = new IteratorChain<_is_father_of>(8) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@503429
                    case 0:
                        return is_father_of_11_0(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1908ca1
                    case 1:
                        return is_father_of_11_1(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@50d89c
                    case 2:
                        return is_father_of_11_2(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1bd0dd4
                    case 3:
                        return is_father_of_11_3(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@d70d7a
                    case 4:
                        return is_father_of_11_4(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@b5f53a
                    case 5:
                        return is_father_of_11_5(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@1f6f0bf
                    case 6:
                        return is_father_of_11_6(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    // nz.org.take.Fact@137c60d
                    case 7:
                        return is_father_of_11_7(slot1, slot2,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.Fact@503429
                    case 0:
                        return "nz.org.take.Fact@503429";

                    // nz.org.take.Fact@1908ca1
                    case 1:
                        return "nz.org.take.Fact@1908ca1";

                    // nz.org.take.Fact@50d89c
                    case 2:
                        return "nz.org.take.Fact@50d89c";

                    // nz.org.take.Fact@1bd0dd4
                    case 3:
                        return "nz.org.take.Fact@1bd0dd4";

                    // nz.org.take.Fact@d70d7a
                    case 4:
                        return "nz.org.take.Fact@d70d7a";

                    // nz.org.take.Fact@b5f53a
                    case 5:
                        return "nz.org.take.Fact@b5f53a";

                    // nz.org.take.Fact@1f6f0bf
                    case 6:
                        return "nz.org.take.Fact@1f6f0bf";

                    // nz.org.take.Fact@137c60d
                    case 7:
                        return "nz.org.take.Fact@137c60d";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_0(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@503429");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Frank") && slot2.equals("Lutz")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_1(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1908ca1");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Guenther") && slot2.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_2(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@50d89c");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Jens") && slot2.equals("Klaus")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_3(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1bd0dd4");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Lutz") && slot2.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_4(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@d70d7a");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Klaus") && slot2.equals("Otto")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_5(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@b5f53a");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Max") && slot2.equals("Jens")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_6(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@1f6f0bf");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Ralf") && slot2.equals("Lutz")) {
            return result;
        }

        return null;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@885c637d
     * @param slot1 input parameter generated from slot 0
     * @param slot2 input parameter generated from slot 1
     * @return an interator for instances of _is_father_of
    */
    private _is_father_of is_father_of_11_7(final java.lang.String slot1,
        final java.lang.String slot2, final DerivationController _derivation) {
        _derivation.log("nz.org.take.Fact@137c60d");

        _is_father_of result = new _is_father_of();
        result.slot1 = slot1;
        result.slot2 = slot2;

        if (slot1.equals("Werner") && slot2.equals("Otto")) {
            return result;
        }

        return null;
    }
}
