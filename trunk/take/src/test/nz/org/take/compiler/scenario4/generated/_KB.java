package test.nz.org.take.compiler.scenario4.generated;

import nz.org.take.rt.*;

import java.util.Iterator;


/**
 * Class generated by the take compiler.
 * @version Mon May 14 11:50:01 NZST 2007
 */
@SuppressWarnings("unchecked")
public class _KB {
    /**
     * Method generated for query nz.org.take.SimplePredicate@9ebdf793
     * @param student input parameter generated from slot 0
     * @return an iterator for instances of IsEnrolled
    */
    public ResultSet<IsEnrolled> isEnrolled(
        final test.nz.org.take.compiler.scenario4.Student student) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsEnrolled> _result = new ResultSet(isEnrolled(student,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@9ebdf793
     * @param student input parameter generated from slot 0
     * @return an iterator for instances of IsEnrolled
    */
    private ResourceIterator<IsEnrolled> isEnrolled(
        final test.nz.org.take.compiler.scenario4.Student student,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsEnrolled> result = new IteratorChain<IsEnrolled>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@bdb375
                    case 0:
                        return isEnrolled_0(student,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@bdb375
                    case 0:
                        return "rule1";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@9ebdf793
     * @param student input parameter generated from slot 0
     * @return an iterator for instances of IsEnrolled
    */
    private ResourceIterator<IsEnrolled> isEnrolled_0(
        final test.nz.org.take.compiler.scenario4.Student student,
        final DerivationController _derivation) {
        _derivation.log("rule1"); // Variable bindings in rule: nz.org.take.DerivationRule@bdb375
        class bindingsInRule1 {
            // Property generated for term  "nz.org.take.Variable@51064e"
            test.nz.org.take.compiler.scenario4.Student p1;

            // Property generated for term  "nz.org.take.Variable@174f02c"
            test.nz.org.take.compiler.scenario4.Course p2;

            // Property generated for term  "nz.org.take.Variable@44006e"
            test.nz.org.take.compiler.scenario4.College p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p1 = student;

        // code for prereq nz.org.take.Prerequisite@78529d
        final ResourceIterator<_courses> iterator1 = courses_10(student,
                _derivation.increaseDepth());

        // code for prereq nz.org.take.Prerequisite@177ff35
        final ResourceIterator<_college> iterator2 = new NestedIterator<_courses, _college>(iterator1) {
                public ResourceIterator<_college> getNextIterator(
                    _courses object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return college_10(bindings.p2, _derivation.increaseDepth());
                }
            };

        // code for prereq nz.org.take.Fact@11402c4
        final ResourceIterator<IsEnrolled> iterator3 = new NestedIterator<_college, IsEnrolled>(iterator2) {
                public ResourceIterator<IsEnrolled> getNextIterator(
                    _college object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = object.slot2;

                    return new SingletonIterator(new IsEnrolled(bindings.p1,
                            bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@9ebdf793
     * @param student input parameter generated from slot 0
     * @param college input parameter generated from slot 1
     * @return an iterator for instances of IsEnrolled
    */
    public ResultSet<IsEnrolled> isEnrolled(
        final test.nz.org.take.compiler.scenario4.Student student,
        final test.nz.org.take.compiler.scenario4.College college) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<IsEnrolled> _result = new ResultSet(isEnrolled(student,
                    college, _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.SimplePredicate@9ebdf793
     * @param student input parameter generated from slot 0
     * @param college input parameter generated from slot 1
     * @return an iterator for instances of IsEnrolled
    */
    private ResourceIterator<IsEnrolled> isEnrolled(
        final test.nz.org.take.compiler.scenario4.Student student,
        final test.nz.org.take.compiler.scenario4.College college,
        final DerivationController _derivation) {
        final int _derivationlevel = _derivation.getDepth();
        ResourceIterator<IsEnrolled> result = new IteratorChain<IsEnrolled>(1) {
                public Object getIteratorOrObject(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@bdb375
                    case 0:
                        return isEnrolled_0(student, college,
                            _derivation.reset(_derivationlevel));

                    default:
                        return EmptyIterator.DEFAULT;
                    } // switch(pos)
                } // getIterator()

                public String getRuleRef(int pos) {
                    switch (pos) {
                    // nz.org.take.DerivationRule@bdb375
                    case 0:
                        return "rule1";

                    default:
                        return "";
                    } // switch(pos)
                } // getRuleRef()
            };

        return result;
    } // blabla

    /**
     * Method generated for query nz.org.take.SimplePredicate@9ebdf793
     * @param student input parameter generated from slot 0
     * @param college input parameter generated from slot 1
     * @return an iterator for instances of IsEnrolled
    */
    private ResourceIterator<IsEnrolled> isEnrolled_0(
        final test.nz.org.take.compiler.scenario4.Student student,
        final test.nz.org.take.compiler.scenario4.College college,
        final DerivationController _derivation) {
        _derivation.log("rule1"); // Variable bindings in rule: nz.org.take.DerivationRule@bdb375
        class bindingsInRule1 {
            // Property generated for term  "nz.org.take.Variable@51064e"
            test.nz.org.take.compiler.scenario4.Student p1;

            // Property generated for term  "nz.org.take.Variable@174f02c"
            test.nz.org.take.compiler.scenario4.Course p2;

            // Property generated for term  "nz.org.take.Variable@44006e"
            test.nz.org.take.compiler.scenario4.College p3;
        }
        ;

        final bindingsInRule1 bindings = new bindingsInRule1();
        bindings.p3 = college;
        bindings.p1 = student;

        // code for prereq nz.org.take.Prerequisite@78529d
        final ResourceIterator<_courses> iterator1 = courses_10(student,
                _derivation.increaseDepth());

        // code for prereq nz.org.take.Prerequisite@177ff35
        final ResourceIterator<_college> iterator2 = new NestedIterator<_courses, _college>(iterator1) {
                public ResourceIterator<_college> getNextIterator(
                    _courses object) {
                    bindings.p1 = object.slot1;
                    bindings.p2 = object.slot2;

                    return college_11(bindings.p2, bindings.p3,
                        _derivation.increaseDepth());
                }
            };

        // code for prereq nz.org.take.Fact@11402c4
        final ResourceIterator<IsEnrolled> iterator3 = new NestedIterator<_college, IsEnrolled>(iterator2) {
                public ResourceIterator<IsEnrolled> getNextIterator(
                    _college object) {
                    bindings.p2 = object.slot1;
                    bindings.p3 = object.slot2;

                    return new SingletonIterator(new IsEnrolled(bindings.p1,
                            bindings.p3));
                }
            };

        return iterator3;
    }

    /**
     * Method generated for query nz.org.take.PropertyPredicate@908f5b27
     * @param slot1 input parameter generated from slot 0
     * @return an iterator for instances of _courses
    */
    public ResultSet<_courses> courses_10(
        final test.nz.org.take.compiler.scenario4.Student slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_courses> _result = new ResultSet(courses_10(slot1,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.compiler.reference.QueryRef@908f5b27
     * @param source
     * @return an iterator
     * code generated using velocity template nz/org/take/compiler/reference/PropertyPredicateONE2MANY_10.vm
    */
    private ResourceIterator<_courses> courses_10(
        final test.nz.org.take.compiler.scenario4.Student source,
        final DerivationController _derivation) {
        final Iterator<test.nz.org.take.compiler.scenario4.Course> iterator = source.getCourses()
                                                                                    .iterator();
        _derivation.log("property courses");

        ResourceIterator<_courses> result = new ResourceIterator<_courses>() {
                public boolean hasNext() {
                    return iterator.hasNext();
                }

                public void close() {
                    // nothing to do here
                }

                public _courses next() {
                    _courses next = new _courses();
                    next.slot1 = source;
                    next.slot2 = iterator.next();

                    return next;
                }

                public void remove() {
                    throw new UnsupportedOperationException(
                        "Remove is not supported here");
                }
            };

        return result;
    }

    /**
    * Method generated for query nz.org.take.PropertyPredicate@366b6202
    * @param slot1 input parameter generated from slot 0
    * @return an iterator for instances of _college
    */
    public ResultSet<_college> college_10(
        final test.nz.org.take.compiler.scenario4.Course slot1) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_college> _result = new ResultSet(college_10(slot1,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.compiler.reference.QueryRef@366b6202
     * @param source
     * @return an iterator
     * code generated using velocity template nz/org/take/compiler/reference/PropertyPredicateONE2ONE_10.vm
    */
    private ResourceIterator<_college> college_10(
        final test.nz.org.take.compiler.scenario4.Course source,
        final DerivationController _derivation) {
        _derivation.log("property college");

        _college result = new _college();
        result.slot1 = source;
        result.slot2 = source.getCollege();

        return new SingletonIterator<_college>(result);
    }

    /**
    * Method generated for query nz.org.take.PropertyPredicate@366b6202
    * @param slot1 input parameter generated from slot 0
    * @param slot2 input parameter generated from slot 1
    * @return an iterator for instances of _college
    */
    public ResultSet<_college> college_11(
        final test.nz.org.take.compiler.scenario4.Course slot1,
        final test.nz.org.take.compiler.scenario4.College slot2) {
        DerivationController _derivation = new DefaultDerivationController();
        ResultSet<_college> _result = new ResultSet(college_11(slot1, slot2,
                    _derivation), _derivation);

        return _result;
    }

    /**
     * Method generated for query nz.org.take.compiler.reference.QueryRef@366b6202
     * @param source
     * @param target
     * @return an iterator
     * code generated using velocity template nz/org/take/compiler/reference/PropertyPredicateONE2ONE_11.vm
    */
    private ResourceIterator<_college> college_11(
        final test.nz.org.take.compiler.scenario4.Course source,
        final test.nz.org.take.compiler.scenario4.College target,
        final DerivationController _derivation) {
        _derivation.log("property college");

        if (target.equals(source.getCollege())) {
            _derivation.log("property college");

            _college result = new _college();
            result.slot1 = source;
            result.slot2 = target;

            return new SingletonIterator<_college>(result);
        }

        return EmptyIterator.DEFAULT;
    }
}
