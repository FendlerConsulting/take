// script for test scenario 1
@@dc:date=30/02/2007
@@dc:creator=author jens dietrich
var java.lang.String descendant,ancestor,x
@take.compilerhint.slots=person1,person2
@take.compilerhint.method=isAncestor
@take.compilerhint.class=AncestorRelationship
query isAncestor[in,in]
rule1: if isFather[descendant,ancestor] then isAncestor[descendant,ancestor]
rule2: if isAncestor[x,ancestor] and isFather[descendant,x] then isAncestor[descendant,ancestor]
fact1: isFather["r0","r"]
fact2: isFather["r1","r"]
fact3: isFather["r00","r0"]
fact4: isFather["r01","r0"]
fact5: isFather["r10","r1"]
fact6: isFather["r11","r1"]
fact7: isFather["r000","r00"]
fact8: isFather["r001","r00"]
fact9: isFather["r010","r01"]
fact10: isFather["r011","r01"]
fact11: isFather["r100","r10"]
fact12: isFather["r101","r10"]
fact13: isFather["r110","r11"]
fact14: isFather["r111","r11"]
starting test case 1
1. rule1
2. fact1
// script for test scenario 1
@@dc:date=30/02/2007
@@dc:creator=author jens dietrich
var java.lang.String descendant,ancestor,x
@take.compilerhint.slots=person1,person2
@take.compilerhint.method=isAncestor
@take.compilerhint.class=AncestorRelationship
query isAncestor[in,in]
rule1: if isFather[descendant,ancestor] then isAncestor[descendant,ancestor]
rule2: if isAncestor[x,ancestor] and isFather[descendant,x] then isAncestor[descendant,ancestor]
fact1: isFather["r0","r"]
fact2: isFather["r1","r"]
fact3: isFather["r00","r0"]
fact4: isFather["r01","r0"]
fact5: isFather["r10","r1"]
fact6: isFather["r11","r1"]
fact7: isFather["r000","r00"]
fact8: isFather["r001","r00"]
fact9: isFather["r010","r01"]
fact10: isFather["r011","r01"]
fact11: isFather["r100","r10"]
fact12: isFather["r101","r10"]
fact13: isFather["r110","r11"]
fact14: isFather["r111","r11"]
starting test case 2
1. rule1
2. fact2
// script for test scenario 1
@@dc:date=30/02/2007
@@dc:creator=author jens dietrich
var java.lang.String descendant,ancestor,x
@take.compilerhint.slots=person1,person2
@take.compilerhint.method=isAncestor
@take.compilerhint.class=AncestorRelationship
query isAncestor[in,in]
rule1: if isFather[descendant,ancestor] then isAncestor[descendant,ancestor]
rule2: if isAncestor[x,ancestor] and isFather[descendant,x] then isAncestor[descendant,ancestor]
fact1: isFather["r0","r"]
fact2: isFather["r1","r"]
fact3: isFather["r00","r0"]
fact4: isFather["r01","r0"]
fact5: isFather["r10","r1"]
fact6: isFather["r11","r1"]
fact7: isFather["r000","r00"]
fact8: isFather["r001","r00"]
fact9: isFather["r010","r01"]
fact10: isFather["r011","r01"]
fact11: isFather["r100","r10"]
fact12: isFather["r101","r10"]
fact13: isFather["r110","r11"]
fact14: isFather["r111","r11"]
starting test case 3
1. rule2
2. rule1
3. fact1
4. fact3
// script for test scenario 1
@@dc:date=30/02/2007
@@dc:creator=author jens dietrich
var java.lang.String descendant,ancestor,x
@take.compilerhint.slots=person1,person2
@take.compilerhint.method=isAncestor
@take.compilerhint.class=AncestorRelationship
query isAncestor[in,in]
rule1: if isFather[descendant,ancestor] then isAncestor[descendant,ancestor]
rule2: if isAncestor[x,ancestor] and isFather[descendant,x] then isAncestor[descendant,ancestor]
fact1: isFather["r0","r"]
fact2: isFather["r1","r"]
fact3: isFather["r00","r0"]
fact4: isFather["r01","r0"]
fact5: isFather["r10","r1"]
fact6: isFather["r11","r1"]
fact7: isFather["r000","r00"]
fact8: isFather["r001","r00"]
fact9: isFather["r010","r01"]
fact10: isFather["r011","r01"]
fact11: isFather["r100","r10"]
fact12: isFather["r101","r10"]
fact13: isFather["r110","r11"]
fact14: isFather["r111","r11"]
starting test case 4
1. rule2
2. rule1
3. fact2
4. fact6
// script for test scenario 1
@@dc:date=30/02/2007
@@dc:creator=author jens dietrich
var java.lang.String descendant,ancestor,x
@take.compilerhint.slots=person1,person2
@take.compilerhint.method=isAncestor
@take.compilerhint.class=AncestorRelationship
query isAncestor[in,in]
rule1: if isFather[descendant,ancestor] then isAncestor[descendant,ancestor]
rule2: if isAncestor[x,ancestor] and isFather[descendant,x] then isAncestor[descendant,ancestor]
fact1: isFather["r0","r"]
fact2: isFather["r1","r"]
fact3: isFather["r00","r0"]
fact4: isFather["r01","r0"]
fact5: isFather["r10","r1"]
fact6: isFather["r11","r1"]
fact7: isFather["r000","r00"]
fact8: isFather["r001","r00"]
fact9: isFather["r010","r01"]
fact10: isFather["r011","r01"]
fact11: isFather["r100","r10"]
fact12: isFather["r101","r10"]
fact13: isFather["r110","r11"]
fact14: isFather["r111","r11"]
starting test case 5
1. rule2
2. rule2
3. rule1
4. fact1
5. fact3
6. fact7
